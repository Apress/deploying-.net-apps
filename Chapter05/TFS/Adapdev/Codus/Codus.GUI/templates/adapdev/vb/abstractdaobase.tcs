#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
#if($tableschema.PrimaryKeyCount > 0)
	#set( $pk = $tableschema.GetPrimaryKey(0))
#end
'******************************************
'* Autogenerated by Codus
'* $datetimenow
'******************************************/
imports System.Collections
imports System.Data
imports System.Data.Common
imports Adapdev.Data
imports Adapdev.Data.Sql

Namespace ${namespace}

	''' <summary>
	''' Base Data Access Object for the $table table.
	''' </summary>
	public MustInherit class ${dao}Base 
		inherits Adapdev.Data.AbstractDAO
        
#foreach($column in $tableschema.SortedColumns.Values)
		''' <summary>
		''' A static representation of column $column.Name
		''' </summary>
		public shared readonly COLUMN_${column.Alias.ToUpper()} as string = "${column.Name}"
#end
#if($tableschema.PrimaryKeyCount > 0)
		''' <summary>
		''' Provides access to the name of the primary key column (${tableschema.GetPrimaryKey(0).Name})
		''' </summary>
		public shared readonly TABLE_PRIMARYKEY as string = "${tableschema.GetPrimaryKey(0).Name}"
#end

		''' <summary>
		''' Provides access to the name of the table
		''' </summary>
		public shared readonly TABLE_NAME as string = "${tableschema.Name}"

		''' <summary>
		''' Provides access to the name of the database
		''' </summary>
		public shared readonly DATABASE_NAME as string = "${databaseschema.Name}"

		
		''' <summary>
		''' Constructor
		''' </summary>
	        public sub new() 
	                mybase.new(DbConstants.DatabaseProviderType, DbConstants.DatabaseType, "$tableschema.Name", DbConstants.ConnectionString)
	        end sub
	        
	        ''' <summary>
	        ''' Maps the IDataReader values to a $entity object
	        ''' </summary>
	        ''' <param name="r">The IDataReader to map</param>
	        ''' <returns>${entity}</returns>
	        protected overrides function MapObject(r as IDataReader) as Object

	            dim  entity as new ${entity}()
	#foreach($column in $tableschema.OrdinalColumns.Values)
				try
					dim ordinal as integer= r.GetOrdinal("${column.Name}")
					if (not r.IsDBNull(ordinal)) Then
						entity.${column.Alias} = directcast(r.GetValue(ordinal),${column.NetType})
					end if
				catch e as Exception
				'TODO: Add logging/debugging code.
				end try
	#end	
	            return entity
	        end function
 
		''' <summary>
		''' Creates the sql insert command, using the values from the passed
		''' in $entity object
		''' </summary>
		''' <param name="o">A $entity object, from which the insert values are pulled</param>
		''' <returns>An IDbCommand</returns>
	        protected overrides function CreateInsertCommand(o as object) as IDbCommand
	#if($tableschema.PrimaryKeyCount > 0) 
				dim entity as $entity = DirectCast(o,${entity})
		#if($sqltypetext)
				dim cmd as IDbCommand= me.CreateCommand("${template.GetInsertSql()}")
				#else
				dim cmd as IDbCommand= me.CreateCommand("codus_${table}Insert")
				cmd.CommandType = CommandType.StoredProcedure
				#end
				dim cmdParams as IDataParameterCollection = cmd.Parameters
	#foreach($column in $tableschema.SortedColumns.Values)
		#if(!$column.IsAutoIncrement)
				'Add parameter for ${column.Alias} column.
				dim par${column.Alias} as IDbDataParameter= cmd.CreateParameter()
				par${column.Alias}.ParameterName = "${template.GetParameterName($column.Name)}"
				par${column.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $column)}
				cmdParams.Add(par${column.Alias})
		#end
	#end
		     return cmd
	#else
		     throw new ApplicationException("No primary key field defined.  Unable to insert record.")
	#end
	        end function

		''' <summary>
		''' Creates the sql update command, using the values from the passed
		''' in $entity object
		''' </summary>
		''' <param name="o">A $entity object, from which the update values are pulled</param>
		''' <returns>An IDbCommand</returns>
	        protected overrides function CreateUpdateCommand(o as object) as System.Data.IDbCommand
	#if($tableschema.PrimaryKeyCount > 0) 

				dim entity as $entity = directcast(o,${entity})
	            
				#if($sqltypetext)
				dim cmd as IDbCommand = me.CreateCommand("${template.GetUpdateSql()}")
				#else
				
				dim cmd as IDbCommand = me.CreateCommand("codus_${table}Update")
				cmd.CommandType = CommandType.StoredProcedure
				#end
				Dim cmdParams As IDataParameterCollection = cmd.Parameters
            
	#foreach($column in $tableschema.SortedColumns.Values)
		#if(!$column.IsAutoIncrement && !$column.IsPrimaryKey)

				dim par${column.Alias} as IDbDataParameter = cmd.CreateParameter()
				par${column.Alias}.ParameterName = "${template.GetParameterName($column.Name)}"
				par${column.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $column)}
				cmdParams.Add(par${column.Alias})
	#end
	#end
	#foreach($primaryKey in $tableschema.PrimaryKeys.Values)
				dim pkpar${primaryKey.Alias} as IDbDataParameter  = cmd.CreateParameter()
				pkpar${primaryKey.Alias}.ParameterName = "${template.GetParameterName($primaryKey.Name)}"
				pkpar${primaryKey.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $primaryKey)}
				cmdParams.Add(pkpar${primaryKey.Alias})
	#end
     	       return cmd
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to update record.")
	#end
	        end function

		''' <summary>
		''' Creates the sql delete command, using the passed in primary key
		''' </summary>
		''' <param name="id">The primary key of the object to delete</param>
		''' <returns>An IDbCommand</returns>
	        protected overrides function CreateDeleteOneCommand(id as object) as System.Data.IDbCommand
	#if($tableschema.HasPrimaryKeys) 

				#if($sqltypetext)
				
				dim cmd as IDbCommand = me.CreateCommand("${template.GetDeleteOneSql()}")
				#else
				
				dim cmd as IDbCommand = me.CreateCommand("codus_${table}DeleteOne")
				cmd.CommandType = CommandType.StoredProcedure
				#end
				
				dim cmdParams as IDataParameterCollection = cmd.Parameters
            
				dim par as IDbDataParameter = cmd.CreateParameter()
				par.ParameterName = "${template.GetParameterName($pk.Name)}"
				par.Value = id
				cmdParams.Add(par)
	            
	            return cmd
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to delete record.")
	#end
	
	        end function
	
       
		''' <summary>
		''' Creates the sql select command, using the passed in primary key
		''' </summary>
		''' <param name="o">The primary key of the object to select</param>
		''' <returns>An IDbCommand</returns>
	        protected overrides function CreateSelectOneCommand(id as object) as IDbCommand
	#if($tableschema.PrimaryKeyCount > 0) 
	
				#if($sqltypetext)
				
				dim cmd as IDbCommand = me.CreateCommand("${template.GetSelectOneSql()}")
				#else
				
				dim cmd as IDbCommand= me.CreateCommand("codus_${table}SelectOne")
				cmd.CommandType = CommandType.StoredProcedure
				#end
				
				dim cmdParams as IDataParameterCollection = cmd.Parameters
            
				dim par as IDbDataParameter= cmd.CreateParameter()
				par.ParameterName = "${template.GetParameterName($pk.Name)}"
				par.Value = id
				cmdParams.Add(par)
            
	            return cmd
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to select record.")
	#end
	
	        end function

	#foreach($fk in $tableschema.ForeignKeys.Values)
		#if($fk.IsActive)

		''' <summary>
		''' Creates the sql select command, using the passed in foreign key.  This will return an
		''' IList of all objects that have that foreign key.
		''' </summary>
		''' <param name="o">The foreign key of the objects to select</param>
		''' <returns>An IList</returns>
		public function SelectAllBy${fk.Alias}(id as object) as IList 
		
				#if($sqltypetext)
				
				dim cmd as IDbCommand = me.CreateCommand("${template.GetForeignKeySql($fk)}")
				#else
				
				dim cmd as IDbCommand= me.CreateCommand("codus_${table}SelectAllBy${fk.Alias}")
				cmd.CommandType = CommandType.StoredProcedure
				#end
				
				dim cmdParams as IDataParameterCollection = cmd.Parameters
            
				dim par as IDbDataParameter = cmd.CreateParameter()
				par.ParameterName = "${template.GetParameterName($fk.Name)}"
				par.Value = id
				cmdParams.Add(par)
            
	            return me.Select(cmd)
		end function

		#end
	#end
	
	#if($tableschema.HasPrimaryKeys && $tableschema.GetPrimaryKey(0).IsAutoIncrement)
	
		protected overloads sub CustomSave(byref o as $entity, byref connection as IDbConnection)
			#if($databaseschema.DatabaseType.ToString() == "ACCESS")
			
			dim query as string= QueryHelper.GetAccessLastInsertedCommand(myclass.TABLE_NAME, myclass.TABLE_PRIMARYKEY)
			dim cmd as IDbCommand = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType)
			cmd.CommandText = query
			cmd.Connection = connection
			dim id as object= cmd.ExecuteScalar()
			me.MapIdentity(o, id)
			
			#elseif($databaseschema.DatabaseType.ToString() == "SQLSERVER")
			dim query as string= QueryHelper.GetSqlServerLastInsertedCommand(myclass.TABLE_NAME)
			dim cmd as IDbCommand  = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType)
			cmd.CommandText = query
			cmd.Connection = connection
			dim id as object = cmd.ExecuteScalar()
			me.MapIdentity(o, id)
			
			#end
			
		end sub
		
		private sub MapIdentity(byref entity as $entity, id as object)
			entity.${tableschema.GetPrimaryKey(0).Alias} = directcast(id,${tableschema.GetPrimaryKey(0).NetType})
		end sub
	
	#end

	end class
	
End Namespace
