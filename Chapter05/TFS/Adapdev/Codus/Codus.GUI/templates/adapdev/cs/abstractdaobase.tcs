#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
#if($tableschema.PrimaryKeyCount > 0)
	#set( $pk = $tableschema.GetPrimaryKey(0))
#end
/******************************************
 * Auto-generated by Codus
 * $datetimenow
 ******************************************/
using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using Adapdev.Data;
using Adapdev.Data.Sql;
    
namespace $namespace {

	/// <summary>
	/// Base Data Access Object for the $table table.
	/// </summary>
	public abstract class ${dao}Base : Adapdev.Data.AbstractDAO {
        
#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive)
		/// <summary>
		/// A static representation of column $column.Name
		/// </summary>
		public static readonly string COLUMN_${column.Alias.ToUpper()} = "${column.Name}";
#end
#end
#if($tableschema.PrimaryKeyCount > 0)
		/// <summary>
		/// Provides access to the name of the primary key column (${tableschema.GetPrimaryKey(0).Name})
		/// </summary>
		public static readonly string TABLE_PRIMARYKEY = "${tableschema.GetPrimaryKey(0).Name}";
#end

		/// <summary>
		/// Provides access to the name of the table
		/// </summary>
		public static readonly string TABLE_NAME = "${tableschema.Name}";

		/// <summary>
		/// Provides access to the name of the database
		/// </summary>
		public static readonly string DATABASE_NAME = "${databaseschema.Name}";

		
		/// <summary>
		/// Constructor
		/// </summary>
	        public ${dao}Base() : 
	                base(DbConstants.DatabaseProviderType, DbConstants.DatabaseType, "$tableschema.Name", DbConstants.ConnectionString) {
	        }
        
	        /// <summary>
	        /// Maps the IDataReader values to a $entity object
	        /// </summary>
	        /// <param name="r">The IDataReader to map</param>
	        /// <returns>${entity}</returns>
	        protected override object MapObject(System.Data.IDataReader r) {

	            $entity entity = new ${entity}();
	            
	#foreach($column in $tableschema.OrdinalColumns.Values)
#if ($column.IsActive)	

				try{
					int ordinal = r.GetOrdinal("${column.Name}");
					if (!r.IsDBNull(ordinal)) entity.${column.Alias} = ((${column.NetType})(r.GetValue(ordinal)));
				}
				catch(Exception){}
#end
	#end	

	            return entity;
	        }
 
		/// <summary>
		/// Creates the sql insert command, using the values from the passed
		/// in $entity object
		/// </summary>
		/// <param name="o">A $entity object, from which the insert values are pulled</param>
		/// <returns>An IDbCommand</returns>
	        protected override System.Data.IDbCommand CreateInsertCommand(object o) {
	#if($tableschema.PrimaryKeyCount > 0) 

				$entity entity = ((${entity})(o));

				#if($sqltypetext)
				
				System.Data.IDbCommand cmd = this.CreateCommand("${template.GetInsertSql()}");
				#else
				
				System.Data.IDbCommand cmd = this.CreateCommand("codus_${table}Insert");
				cmd.CommandType = CommandType.StoredProcedure;
				#end
				
				IDataParameterCollection cmdParams = cmd.Parameters;

	#foreach($column in $tableschema.SortedColumns.Values)
	#if(!$column.IsAutoIncrement && $column.IsActive)

				System.Data.IDbDataParameter par${column.Alias} = cmd.CreateParameter();
				par${column.Alias}.ParameterName = "${template.GetParameterName($column.Name)}";
				par${column.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $column)};
#if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
				((MySql.Data.MySqlClient.MySqlParameter)par${column.Alias}).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${column.GetMySqlDbTypeName()};
#end
				cmdParams.Add(par${column.Alias});
	#end
	#end
			
				return cmd;
	#else
		     throw new ApplicationException("No primary key field defined.  Unable to insert record.");
	#end
	
	        }

		/// <summary>
		/// Creates the sql update command, using the values from the passed
		/// in $entity object
		/// </summary>
		/// <param name="o">A $entity object, from which the update values are pulled</param>
		/// <returns>An IDbCommand</returns>
	        protected override System.Data.IDbCommand CreateUpdateCommand(object o) {
	#if($tableschema.PrimaryKeyCount > 0) 

				$entity entity = ((${entity})(o));
	            
				#if($sqltypetext)
				
	            System.Data.IDbCommand cmd = this.CreateCommand("${template.GetUpdateSql()}");
				#else
				
				System.Data.IDbCommand cmd = this.CreateCommand("codus_${table}Update");
				cmd.CommandType = CommandType.StoredProcedure;
				#end
				
				IDataParameterCollection cmdParams = cmd.Parameters;
            
	#foreach($column in $tableschema.SortedColumns.Values)
	#if(!$column.IsAutoIncrement && !$column.IsPrimaryKey && $column.IsActive)

				System.Data.IDbDataParameter par${column.Alias} = cmd.CreateParameter();
				par${column.Alias}.ParameterName = "${template.GetParameterName($column.Name)}";
				par${column.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $column)};
#if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
				((MySql.Data.MySqlClient.MySqlParameter)par${column.Alias}).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${column.GetMySqlDbTypeName()};
#end
				cmdParams.Add(par${column.Alias});
	#end
	#end

#foreach($primaryKey in $tableschema.PrimaryKeys.Values)
				System.Data.IDbDataParameter pkpar${primaryKey.Alias} = cmd.CreateParameter();
				pkpar${primaryKey.Alias}.ParameterName = "${template.GetParameterName($primaryKey.Name)}";
				pkpar${primaryKey.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $primaryKey)};
#if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
				((MySql.Data.MySqlClient.MySqlParameter)pkpar${primaryKey.Alias}).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${primaryKey.GetMySqlDbTypeName()};
#end
				cmdParams.Add(pkpar${primaryKey.Alias});
	#end

            
				return cmd;
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to update record.");
	#end
	
	        }

		/// <summary>
		/// Creates the sql delete command, using the passed in primary key
		/// </summary>
		/// <param name="id">The primary key of the object to delete</param>
		/// <returns>An IDbCommand</returns>
	        protected override System.Data.IDbCommand CreateDeleteOneCommand(object id) {
	#if($tableschema.HasPrimaryKeys) 

				#if($sqltypetext)
				
	            System.Data.IDbCommand cmd = this.CreateCommand("${template.GetDeleteOneSql()}");
				#else
				
				System.Data.IDbCommand cmd = this.CreateCommand("codus_${table}DeleteOne");
				cmd.CommandType = CommandType.StoredProcedure;
				#end
				
				IDataParameterCollection cmdParams = cmd.Parameters;
            
				System.Data.IDbDataParameter par = cmd.CreateParameter();
				par.ParameterName = "${template.GetParameterName($pk.Name)}";
				par.Value = id;
#if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
				((MySql.Data.MySqlClient.MySqlParameter)par).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${pk.GetMySqlDbTypeName()};
#end
				cmdParams.Add(par);
	            
	            return cmd;
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to delete record.");
	#end
	
	        }
	
       
		/// <summary>
		/// Creates the sql select command, using the passed in primary key
		/// </summary>
		/// <param name="o">The primary key of the object to select</param>
		/// <returns>An IDbCommand</returns>
	        protected override System.Data.IDbCommand CreateSelectOneCommand(object id) {
	#if($tableschema.PrimaryKeyCount > 0) 
	
				#if($sqltypetext)
				
				System.Data.IDbCommand cmd = this.CreateCommand("${template.GetSelectOneSql()}");
				#else
				
				System.Data.IDbCommand cmd = this.CreateCommand("codus_${table}SelectOne");
				cmd.CommandType = CommandType.StoredProcedure;
				#end
				
				IDataParameterCollection cmdParams = cmd.Parameters;
            
				System.Data.IDbDataParameter par = cmd.CreateParameter();
				par.ParameterName = "${template.GetParameterName($pk.Name)}";
				par.Value = id;
#if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
				((MySql.Data.MySqlClient.MySqlParameter)par).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${pk.GetMySqlDbTypeName()};
#end
				cmdParams.Add(par);
            
	            return cmd;
	#else
		    throw new ApplicationException("No primary key field defined.  Unable to select record.");
	#end
	
	        }

	#foreach($fk in $tableschema.ForeignKeys.Values)
		#if($fk.IsActive)

		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <param name="o">The foreign key of the objects to select</param>
		/// <returns>An IList</returns>
		public IList SelectAllBy${fk.Alias}(object id)
		{
				#if($sqltypetext)
				
				System.Data.IDbCommand cmd = this.CreateCommand("${template.GetForeignKeySql($fk)}");
				#else
				
				System.Data.IDbCommand cmd = this.CreateCommand("codus_${table}SelectAllBy${fk.Alias}");
				cmd.CommandType = CommandType.StoredProcedure;
				#end
				
				IDataParameterCollection cmdParams = cmd.Parameters;
            
				System.Data.IDbDataParameter par = cmd.CreateParameter();
				par.ParameterName = "${template.GetParameterName($fk.Name)}";
				par.Value = id;
				cmdParams.Add(par);
            
	            return this.Select(cmd);
		}

		#end
	#end
	
	#if($tableschema.HasPrimaryKeys && $tableschema.GetPrimaryKey(0).IsAutoIncrement)
	
		protected override void CustomSave(object o, IDbConnection connection){
			#if($databaseschema.DatabaseType.ToString() == "ACCESS")
			
			string query = QueryHelper.GetAccessLastInsertedCommand(${dao}.TABLE_NAME, ${dao}.TABLE_PRIMARYKEY);
			IDbCommand cmd = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType);
			cmd.CommandText = query;
			cmd.Connection = connection;
			object id = cmd.ExecuteScalar();
			this.MapIdentity(o as $entity, id);
			
			#elseif($databaseschema.DatabaseType.ToString() == "SQLSERVER")
			
			string query = QueryHelper.GetSqlServerLastInsertedCommand(${dao}.TABLE_NAME);
			IDbCommand cmd = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType);
			cmd.CommandText = query;
			cmd.Connection = connection;
			object id = cmd.ExecuteScalar();
			this.MapIdentity(o as $entity, id);
			
			#end
			
		}
		
		protected override void CustomSave(object o, IDbConnection connection, IDbTransaction transaction){
			#if($databaseschema.DatabaseType.ToString() == "ACCESS")
			
			string query = QueryHelper.GetAccessLastInsertedCommand(${dao}.TABLE_NAME, ${dao}.TABLE_PRIMARYKEY);
			IDbCommand cmd = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType);
			cmd.CommandText = query;
			cmd.Transaction = transaction;
			cmd.Connection = connection;
			object id = cmd.ExecuteScalar();
			this.MapIdentity(o as $entity, id);
			
			#elseif($databaseschema.DatabaseType.ToString() == "SQLSERVER")
			
			string query = QueryHelper.GetSqlServerLastInsertedCommand(${dao}.TABLE_NAME);
			IDbCommand cmd = DbProviderFactory.CreateCommand(DbConstants.DatabaseProviderType);
			cmd.CommandText = query;
			cmd.Transaction = transaction;
			cmd.Connection = connection;
			object id = cmd.ExecuteScalar();
			this.MapIdentity(o as $entity, id);
			
			#end
			
		}		
		
		private void MapIdentity($entity entity, object id){
			entity.${tableschema.GetPrimaryKey(0).Alias} = ${template.GetConversionExpression($tableschema.GetPrimaryKey(0).NetType)}(id);
		}
	
	#end

    }
    
}
