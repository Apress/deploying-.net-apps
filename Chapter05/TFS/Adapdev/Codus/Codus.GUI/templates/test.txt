#set( $dao = "${tableschema.GetTrimmedName()}DAO" )
#set( $table = "${tableschema.GetTrimmedName()}" )
#set( $entity = "${tableschema.GetTrimmedName()}Entity" )
#set( $pk = $tableschema.GetPrimaryKey(0))

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace $namespace {
    using System;
    using System.Data;
    using System.Data.Common;
    using Adapdev.Data;
    using Adapdev.Data.Commons; adfad
    using Adapdev.Data.Sql;
    
    
    public class ${dao}Base : Adapdev.Data.AbstractDAO {
        
#foreach($column in $tableschema.GetSortedColumns().Values)
		public static readonly string $column.GetTrimmedName().ToUpper(new System.Globalization.CultureInfo("en-US")) = "${column.Name}";
#end
        
        public ${dao}Base() : 
                base(DbConstants.DatabaseProviderType, DbConstants.DatabaseType, "$tableschema.Name", DbConstants.ConnectionString) {
        }
        
        protected override object MapObject(System.Data.IDataReader r) {
            $entity entity = new ${entity}();
            
#foreach($column in $tableschema.GetOrdinalColumns().Values)
			if (r.IsDBNull(${column.Ordinal})) {
				// Add any error handling here.
			}
			else
			{
				entity.${column.GetTrimmedName()} = ((${column.NetType})(r.GetValue(${column.Ordinal})));
			}
			
#end	

            return entity;
        }
        
        protected override System.Data.IDbCommand GetSelectOneCommand(object id) {
            System.Data.IDbCommand cmd = this.GetCommand("${template.GetSelectOneSql()}");
            IDataParameterCollection cmdParams = cmd.Parameters;
            
			System.Data.IDbDataParameter par = cmd.CreateParameter();
			par.ParameterName = "${template.GetParameterName($pk.Name)}";
			par.Value = id;
			cmdParams.Add(par);
            
            return cmd;
        }
        
        protected override System.Data.IDbCommand GetInsertCommand(object o) {
			$entity entity = ((${entity})(o));

			System.Data.IDbCommand cmd = this.GetCommand("${template.GetInsertSql()}");
			IDataParameterCollection cmdParams = cmd.Parameters;

#foreach($column in $tableschema.GetSortedColumns().Values)
#if(!$column.IsAutoIncrement)
			System.Data.IDbDataParameter par${column.GetTrimmedName()} = cmd.CreateParameter();
			par${column.GetTrimmedName()}.ParameterName = "${template.GetParameterName($column.Name)}";
			par${column.GetTrimmedName()}.Value = entity.${template.GetParameterValue($column)};
			cmdParams.Add(par${column.GetTrimmedName()});

#end
#end
			
			return cmd;
        }
        
        protected override System.Data.IDbCommand GetUpdateCommand(object o) {
            $entity entity = ((${entity})(o));
            
            System.Data.IDbCommand cmd = this.GetCommand("${template.GetUpdateSql()}");
            IDataParameterCollection cmdParams = cmd.Parameters;
            
#foreach($column in $tableschema.GetSortedColumns().Values)
#if(!$column.IsAutoIncrement && !$column.IsPrimaryKey)
			System.Data.IDbDataParameter par${column.GetTrimmedName()} = cmd.CreateParameter();
			par${column.GetTrimmedName()}.ParameterName = "${template.GetParameterName($column.Name)}";
			par${column.GetTrimmedName()}.Value = entity.${template.GetParameterValue($column)};
			cmdParams.Add(par${column.GetTrimmedName()});
			
#elseif($column.IsPrimaryKey)
			System.Data.IDbDataParameter par${column.GetTrimmedName()} = cmd.CreateParameter();
			par${column.GetTrimmedName()}.ParameterName = "${template.GetParameterName($column.Name)}";
			par${column.GetTrimmedName()}.Value = entity.${template.GetParameterValue($column)};
			cmdParams.Add(par${column.GetTrimmedName()});
			
#end
#end
            
            return cmd;
        }
        
        protected override System.Data.IDbCommand GetDeleteOneCommand(object id) {
            System.Data.IDbCommand cmd = this.GetCommand("${template.GetDeleteOneSql()}");
            IDataParameterCollection cmdParams = cmd.Parameters;
            
			System.Data.IDbDataParameter par = cmd.CreateParameter();
			par.ParameterName = "${template.GetParameterName($pk.Name)}";
			par.Value = id;
			cmdParams.Add(par);
            
            return cmd;
        }
    }
}
