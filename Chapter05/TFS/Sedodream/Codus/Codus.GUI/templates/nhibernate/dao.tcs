#if($tableschema.HasPrimaryKeys)
#*
<?xml version="1.0" encoding="utf-8"?>
<config xmlns="http://tempuri.org/DynamicGUI.xsd">
	<file name="${table}DAOBase.cs"/>
	<textbox name="namespace" label="Namespace" />
	<radiobuttons name="sqltype">
		<radiobutton name="text" label="Text" checked="true" />
		<radiobutton name="sp" label="Stored Procedure" />
		<radiobutton name="dynamic" label="Dynamic" />
	</radiobuttons>
</config>
*#
#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
#set( $pk = $tableschema.GetPrimaryKey(0))
/******************************************
 * Auto-generated by Codus
 * $datetimenow
 ******************************************/
using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Expression;
    
namespace $namespace {

	/// <summary>
	/// Base Data Access Object for the $table table.
	/// </summary>
	public class ${dao} {
        
#foreach($column in $tableschema.SortedColumns.Values)
		/// <summary>
		/// A static representation of column $column.Name
		/// </summary>
		public static readonly string COLUMN_${column.Alias.ToUpper()} = "${column.Name}";
#end
#if($tableschema.PrimaryKeyCount > 0)
		/// <summary>
		/// Provides access to the name of the primary key column (${tableschema.GetPrimaryKey(0).Name})
		/// </summary>
		public static readonly string TABLE_PRIMARYKEY = "${tableschema.GetPrimaryKey(0).Name}";
#end

		/// <summary>
		/// Provides access to the name of the table
		/// </summary>
		public static readonly string TABLE_NAME = "${tableschema.Name}";

		/// <summary>
		/// Provides access to the name of the table
		/// </summary>
		public static readonly string DATABASE_NAME = "${databaseschema.Name}";

		
		private ISessionFactory factory = null;

		/// <summary>
		/// Constructor
		/// </summary>
		public ${dao}()
		{
			factory = Configurator.GetSessionFactory();

		}


		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <param name="o">The foreign key of the objects to select</param>
		/// <returns>An IList</returns>
		public IList SelectAll()
		{
			ISession session = factory.OpenSession();
			IList results = session.CreateCriteria(typeof(${entity})).List();
			session.Close();
			return results;
			
		}


		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <returns>An ${entity}</returns>
		public ${entity} SelectById(object id)
		{
			ISession session = factory.OpenSession();
			$entity result = session.Load(typeof(${entity}), id) as ${entity};
			session.Close();
			return result;
		}


		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <returns>An ${entity}</returns>
		public void Save($entity o)
		{
			ISession session = factory.OpenSession();
			session.SaveOrUpdate(o);
			session.Close();
		}



		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <returns>An ${entity}</returns>
		public void Delete($entity o)
		{
			ISession session = factory.OpenSession();
			session.Delete(o);
			session.Flush();
			session.Close();
		}


		
		public int Count
		{
			get
			{
				int count = 0;
				ISession session = factory.OpenSession();
				IList results = session.Find("select count(o.${pk.Alias}) from ${namespace}.${entity} as o");
				if(results[0] != null) count = (int)results[0];
				session.Close();
				return count;

			}
		}
		
		public ISessionFactory ISessionFactory
		{
			get{return factory;}
		}	
			
	#foreach($fk in $tableschema.ForeignKeys.Values)
	#if($fk.IsActive)

		/// <summary>
		/// Creates the sql select command, using the passed in foreign key.  This will return an
		/// IList of all objects that have that foreign key.
		/// </summary>
		/// <param name="o">The foreign key of the objects to select</param>
		/// <returns>An IList</returns>
		public IList SelectAllBy${fk.Alias}(object id)
		{
			ISession session = factory.OpenSession();
			IList results = session.CreateCriteria(typeof($entity))
				.Add(NHibernate.Expression.Expression.Eq("${fk.Alias}", id))
				.List();
			session.Close();
			return results;
		}
	#end
	#end

    }
}
#end