#*<?xml version="1.0" encoding="utf-8"?>
<config xmlns="http://tempuri.org/DynamicGUI.xsd">
    <file name="${table}WebService.cs" />
	<textbox name="namespace" label="Namespace" />
</config>
*#
#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
/******************************************
 * Auto-generated by Codus
 * $datetimenow
 ******************************************/
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Xml.Serialization;
using ${namespace};
using ${namespace}.Collections;

namespace ${namespace}.WebServices
{
	/// <summary>
	/// Provides functionality for $entity objects
	/// </summary>
	[WebService(Description="Provides functionality for $entity objects",Namespace=WebServiceConstants.Namespace)]
	public class ${table}WebService : System.Web.Services.WebService
	{
		public ${table}WebService()
		{
			//CODEGEN: This call is required by the ASP.NET Web Services Designer
			InitializeComponent();
		}

		[WebMethod(Description="Deletes a $entity object using the specified primary key")]
		public void Delete(object id)
		{
			${dao} dao = new ${dao}();
			dao.Delete(id);
		}

		[WebMethod(Description="Saves the passed in $entity to the underlying datastore")]
		public void Save(object o)
		{
			${dao} dao = new ${dao}();
			dao.Save(o);
		}

		[WebMethod(Description="Saves the passed in DataSet to the underlying datastore")]
		public void SaveDS(DataSet ds)
		{
			${dao} dao = new ${dao}();
			dao.SaveDS(ds);
		}

		[WebMethod(Description="Retrieves all $entity objects from the underlying datastore")]
		[XmlInclude(typeof(${entity}Collection))]
		public ${entity}Collection SelectAll()
		{
			${dao} dao = new ${dao}();
			return new ${entity}Collection(dao.SelectAll());
		}

		[WebMethod(Description="Retrieves a DataSet from the underlying datastore")]
		public DataSet SelectAllDS()
		{
			${dao} dao = new ${dao}();
			return dao.SelectAllDS();
		}

		[WebMethod(Description="Retrieves a $entity object, using the specified primary key")]
		public $entity SelectOne(int id)
		{
			${dao} dao = new ${dao}();
			return (${entity}dao.SelectById(id);
		}

		[WebMethod(Description="Retrieves a $entity object, using the specified primary key")]
		[Obsolete("This method is obsolete.  Use SelectById")]
		public $entity SelectById(int id)
		{
			${dao} dao = new ${dao}();
			return (${entity}dao.SelectById(id);
		}


		
#foreach($fk in $tableschema.ForeignKeys.Values)
		[WebMethod(Description="Retrieves a collection of $entity objects that contain the specified foreign key")]
		[XmlInclude(typeof(${entity}Collection))]
		public ${entity}Collection SelectAllBy${fk.Alias}(object id)
		{
			${dao} dao = new ${dao}();
			return new ${entity}Collection(dao.SelectAllBy${fk.Alias}(id));
		}

#end		

		[WebMethod(Description="Retrieves a DataSet containing a $entity object with the specified primary key")]
		[Obsolete("This method is obsolete.  Use SelectDatasetById")]
		public DataSet SelectOneDS(object id)
		{
			${dao} dao = new ${dao}();
			return dao.SelectDatasetById(id);
		}

		[WebMethod(Description="Retrieves a DataSet containing a $entity object with the specified primary key")]
		public DataSet SelectDatasetById(object id)
		{
			${dao} dao = new ${dao}();
			return dao.SelectDatasetById(id);
		}

		[WebMethod(Description="Updates the specified $entity object in the underlying datastore")]
		public void Update(object o)
		{
			${dao} dao = new ${dao}();
			dao.Update(o);
		}

		#region Component Designer generated code
		
		//Required by the Web Services Designer 
		private IContainer components = null;
				
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if(disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);		
		}
		
		#endregion
	}
}