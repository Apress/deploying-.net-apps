//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Adapdev.Codus.GUI {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TemplateProjects : DataSet {
        
        private SolutionsDataTable tableSolutions;
        
        private SolutionDataTable tableSolution;
        
        private ProjectsDataTable tableProjects;
        
        private ProjectDataTable tableProject;
        
        private _refDataTable table_ref;
        
        private TemplateProjectDataTable tableTemplateProject;
        
        private EditorDataTable tableEditor;
        
        private TemplatesDataTable tableTemplates;
        
        private TemplateDataTable tableTemplate;
        
        private depsDataTable tabledeps;
        
        private depDataTable tabledep;
        
        private CustomCodeDataTable tableCustomCode;
        
        private CodeDataTable tableCode;
        
        private CompiledProjectDataTable tableCompiledProject;
        
        private CompiledTemplateDataTable tableCompiledTemplate;
        
        private DataRelation relationProject_ref;
        
        private DataRelation relationProjects_Project;
        
        private DataRelation relationSolution_Projects;
        
        private DataRelation relationSolutions_Solution;
        
        private DataRelation relationdeps_dep;
        
        private DataRelation relationTemplate_deps;
        
        private DataRelation relationTemplates_Template;
        
        private DataRelation relationCustomCode_Code;
        
        private DataRelation relationTemplateProject_Editor;
        
        private DataRelation relationTemplateProject_Templates;
        
        private DataRelation relationTemplateProject_CustomCode;
        
        private DataRelation relationCompiledProject_CompiledTemplate;
        
        public TemplateProjects() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TemplateProjects(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Solutions"] != null)) {
                    this.Tables.Add(new SolutionsDataTable(ds.Tables["Solutions"]));
                }
                if ((ds.Tables["Solution"] != null)) {
                    this.Tables.Add(new SolutionDataTable(ds.Tables["Solution"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["ref"] != null)) {
                    this.Tables.Add(new _refDataTable(ds.Tables["ref"]));
                }
                if ((ds.Tables["TemplateProject"] != null)) {
                    this.Tables.Add(new TemplateProjectDataTable(ds.Tables["TemplateProject"]));
                }
                if ((ds.Tables["Editor"] != null)) {
                    this.Tables.Add(new EditorDataTable(ds.Tables["Editor"]));
                }
                if ((ds.Tables["Templates"] != null)) {
                    this.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    this.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["deps"] != null)) {
                    this.Tables.Add(new depsDataTable(ds.Tables["deps"]));
                }
                if ((ds.Tables["dep"] != null)) {
                    this.Tables.Add(new depDataTable(ds.Tables["dep"]));
                }
                if ((ds.Tables["CustomCode"] != null)) {
                    this.Tables.Add(new CustomCodeDataTable(ds.Tables["CustomCode"]));
                }
                if ((ds.Tables["Code"] != null)) {
                    this.Tables.Add(new CodeDataTable(ds.Tables["Code"]));
                }
                if ((ds.Tables["CompiledProject"] != null)) {
                    this.Tables.Add(new CompiledProjectDataTable(ds.Tables["CompiledProject"]));
                }
                if ((ds.Tables["CompiledTemplate"] != null)) {
                    this.Tables.Add(new CompiledTemplateDataTable(ds.Tables["CompiledTemplate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolutionsDataTable Solutions {
            get {
                return this.tableSolutions;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolutionDataTable Solution {
            get {
                return this.tableSolution;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectsDataTable Projects {
            get {
                return this.tableProjects;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _refDataTable _ref {
            get {
                return this.table_ref;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateProjectDataTable TemplateProject {
            get {
                return this.tableTemplateProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EditorDataTable Editor {
            get {
                return this.tableEditor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplatesDataTable Templates {
            get {
                return this.tableTemplates;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateDataTable Template {
            get {
                return this.tableTemplate;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public depsDataTable deps {
            get {
                return this.tabledeps;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public depDataTable dep {
            get {
                return this.tabledep;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomCodeDataTable CustomCode {
            get {
                return this.tableCustomCode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CodeDataTable Code {
            get {
                return this.tableCode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompiledProjectDataTable CompiledProject {
            get {
                return this.tableCompiledProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompiledTemplateDataTable CompiledTemplate {
            get {
                return this.tableCompiledTemplate;
            }
        }
        
        public override DataSet Clone() {
            TemplateProjects cln = ((TemplateProjects)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Solutions"] != null)) {
                this.Tables.Add(new SolutionsDataTable(ds.Tables["Solutions"]));
            }
            if ((ds.Tables["Solution"] != null)) {
                this.Tables.Add(new SolutionDataTable(ds.Tables["Solution"]));
            }
            if ((ds.Tables["Projects"] != null)) {
                this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
            }
            if ((ds.Tables["Project"] != null)) {
                this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
            }
            if ((ds.Tables["ref"] != null)) {
                this.Tables.Add(new _refDataTable(ds.Tables["ref"]));
            }
            if ((ds.Tables["TemplateProject"] != null)) {
                this.Tables.Add(new TemplateProjectDataTable(ds.Tables["TemplateProject"]));
            }
            if ((ds.Tables["Editor"] != null)) {
                this.Tables.Add(new EditorDataTable(ds.Tables["Editor"]));
            }
            if ((ds.Tables["Templates"] != null)) {
                this.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
            }
            if ((ds.Tables["Template"] != null)) {
                this.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
            }
            if ((ds.Tables["deps"] != null)) {
                this.Tables.Add(new depsDataTable(ds.Tables["deps"]));
            }
            if ((ds.Tables["dep"] != null)) {
                this.Tables.Add(new depDataTable(ds.Tables["dep"]));
            }
            if ((ds.Tables["CustomCode"] != null)) {
                this.Tables.Add(new CustomCodeDataTable(ds.Tables["CustomCode"]));
            }
            if ((ds.Tables["Code"] != null)) {
                this.Tables.Add(new CodeDataTable(ds.Tables["Code"]));
            }
            if ((ds.Tables["CompiledProject"] != null)) {
                this.Tables.Add(new CompiledProjectDataTable(ds.Tables["CompiledProject"]));
            }
            if ((ds.Tables["CompiledTemplate"] != null)) {
                this.Tables.Add(new CompiledTemplateDataTable(ds.Tables["CompiledTemplate"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSolutions = ((SolutionsDataTable)(this.Tables["Solutions"]));
            if ((this.tableSolutions != null)) {
                this.tableSolutions.InitVars();
            }
            this.tableSolution = ((SolutionDataTable)(this.Tables["Solution"]));
            if ((this.tableSolution != null)) {
                this.tableSolution.InitVars();
            }
            this.tableProjects = ((ProjectsDataTable)(this.Tables["Projects"]));
            if ((this.tableProjects != null)) {
                this.tableProjects.InitVars();
            }
            this.tableProject = ((ProjectDataTable)(this.Tables["Project"]));
            if ((this.tableProject != null)) {
                this.tableProject.InitVars();
            }
            this.table_ref = ((_refDataTable)(this.Tables["ref"]));
            if ((this.table_ref != null)) {
                this.table_ref.InitVars();
            }
            this.tableTemplateProject = ((TemplateProjectDataTable)(this.Tables["TemplateProject"]));
            if ((this.tableTemplateProject != null)) {
                this.tableTemplateProject.InitVars();
            }
            this.tableEditor = ((EditorDataTable)(this.Tables["Editor"]));
            if ((this.tableEditor != null)) {
                this.tableEditor.InitVars();
            }
            this.tableTemplates = ((TemplatesDataTable)(this.Tables["Templates"]));
            if ((this.tableTemplates != null)) {
                this.tableTemplates.InitVars();
            }
            this.tableTemplate = ((TemplateDataTable)(this.Tables["Template"]));
            if ((this.tableTemplate != null)) {
                this.tableTemplate.InitVars();
            }
            this.tabledeps = ((depsDataTable)(this.Tables["deps"]));
            if ((this.tabledeps != null)) {
                this.tabledeps.InitVars();
            }
            this.tabledep = ((depDataTable)(this.Tables["dep"]));
            if ((this.tabledep != null)) {
                this.tabledep.InitVars();
            }
            this.tableCustomCode = ((CustomCodeDataTable)(this.Tables["CustomCode"]));
            if ((this.tableCustomCode != null)) {
                this.tableCustomCode.InitVars();
            }
            this.tableCode = ((CodeDataTable)(this.Tables["Code"]));
            if ((this.tableCode != null)) {
                this.tableCode.InitVars();
            }
            this.tableCompiledProject = ((CompiledProjectDataTable)(this.Tables["CompiledProject"]));
            if ((this.tableCompiledProject != null)) {
                this.tableCompiledProject.InitVars();
            }
            this.tableCompiledTemplate = ((CompiledTemplateDataTable)(this.Tables["CompiledTemplate"]));
            if ((this.tableCompiledTemplate != null)) {
                this.tableCompiledTemplate.InitVars();
            }
            this.relationProject_ref = this.Relations["Project_ref"];
            this.relationProjects_Project = this.Relations["Projects_Project"];
            this.relationSolution_Projects = this.Relations["Solution_Projects"];
            this.relationSolutions_Solution = this.Relations["Solutions_Solution"];
            this.relationdeps_dep = this.Relations["deps_dep"];
            this.relationTemplate_deps = this.Relations["Template_deps"];
            this.relationTemplates_Template = this.Relations["Templates_Template"];
            this.relationCustomCode_Code = this.Relations["CustomCode_Code"];
            this.relationTemplateProject_Editor = this.Relations["TemplateProject_Editor"];
            this.relationTemplateProject_Templates = this.Relations["TemplateProject_Templates"];
            this.relationTemplateProject_CustomCode = this.Relations["TemplateProject_CustomCode"];
            this.relationCompiledProject_CompiledTemplate = this.Relations["CompiledProject_CompiledTemplate"];
        }
        
        private void InitClass() {
            this.DataSetName = "TemplateProjects";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TemplateProjects.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableSolutions = new SolutionsDataTable();
            this.Tables.Add(this.tableSolutions);
            this.tableSolution = new SolutionDataTable();
            this.Tables.Add(this.tableSolution);
            this.tableProjects = new ProjectsDataTable();
            this.Tables.Add(this.tableProjects);
            this.tableProject = new ProjectDataTable();
            this.Tables.Add(this.tableProject);
            this.table_ref = new _refDataTable();
            this.Tables.Add(this.table_ref);
            this.tableTemplateProject = new TemplateProjectDataTable();
            this.Tables.Add(this.tableTemplateProject);
            this.tableEditor = new EditorDataTable();
            this.Tables.Add(this.tableEditor);
            this.tableTemplates = new TemplatesDataTable();
            this.Tables.Add(this.tableTemplates);
            this.tableTemplate = new TemplateDataTable();
            this.Tables.Add(this.tableTemplate);
            this.tabledeps = new depsDataTable();
            this.Tables.Add(this.tabledeps);
            this.tabledep = new depDataTable();
            this.Tables.Add(this.tabledep);
            this.tableCustomCode = new CustomCodeDataTable();
            this.Tables.Add(this.tableCustomCode);
            this.tableCode = new CodeDataTable();
            this.Tables.Add(this.tableCode);
            this.tableCompiledProject = new CompiledProjectDataTable();
            this.Tables.Add(this.tableCompiledProject);
            this.tableCompiledTemplate = new CompiledTemplateDataTable();
            this.Tables.Add(this.tableCompiledTemplate);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Solutions_Solution", new DataColumn[] {
                        this.tableSolutions.Solutions_IdColumn}, new DataColumn[] {
                        this.tableSolution.Solutions_IdColumn});
            this.tableSolution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Solution_Projects", new DataColumn[] {
                        this.tableSolution.Solution_IdColumn}, new DataColumn[] {
                        this.tableProjects.Solution_IdColumn});
            this.tableProjects.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Projects_Project", new DataColumn[] {
                        this.tableProjects.Projects_IdColumn}, new DataColumn[] {
                        this.tableProject.Projects_IdColumn});
            this.tableProject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Project_ref", new DataColumn[] {
                        this.tableProject.Project_IdColumn}, new DataColumn[] {
                        this.table_ref.Project_IdColumn});
            this.table_ref.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TemplateProject_Editor", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableEditor.TemplateProject_IdColumn});
            this.tableEditor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TemplateProject_Templates", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableTemplates.TemplateProject_IdColumn});
            this.tableTemplates.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Templates_Template", new DataColumn[] {
                        this.tableTemplates.Templates_IdColumn}, new DataColumn[] {
                        this.tableTemplate.Templates_IdColumn});
            this.tableTemplate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Template_deps", new DataColumn[] {
                        this.tableTemplate.Template_IdColumn}, new DataColumn[] {
                        this.tabledeps.Template_IdColumn});
            this.tabledeps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("deps_dep", new DataColumn[] {
                        this.tabledeps.deps_IdColumn}, new DataColumn[] {
                        this.tabledep.deps_IdColumn});
            this.tabledep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TemplateProject_CustomCode", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableCustomCode.TemplateProject_IdColumn});
            this.tableCustomCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CustomCode_Code", new DataColumn[] {
                        this.tableCustomCode.CustomCode_IdColumn}, new DataColumn[] {
                        this.tableCode.CustomCode_IdColumn});
            this.tableCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CompiledProject_CompiledTemplate", new DataColumn[] {
                        this.tableCompiledProject.CompiledProject_IdColumn}, new DataColumn[] {
                        this.tableCompiledTemplate.CompiledProject_IdColumn});
            this.tableCompiledTemplate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationProject_ref = new DataRelation("Project_ref", new DataColumn[] {
                        this.tableProject.Project_IdColumn}, new DataColumn[] {
                        this.table_ref.Project_IdColumn}, false);
            this.relationProject_ref.Nested = true;
            this.Relations.Add(this.relationProject_ref);
            this.relationProjects_Project = new DataRelation("Projects_Project", new DataColumn[] {
                        this.tableProjects.Projects_IdColumn}, new DataColumn[] {
                        this.tableProject.Projects_IdColumn}, false);
            this.relationProjects_Project.Nested = true;
            this.Relations.Add(this.relationProjects_Project);
            this.relationSolution_Projects = new DataRelation("Solution_Projects", new DataColumn[] {
                        this.tableSolution.Solution_IdColumn}, new DataColumn[] {
                        this.tableProjects.Solution_IdColumn}, false);
            this.relationSolution_Projects.Nested = true;
            this.Relations.Add(this.relationSolution_Projects);
            this.relationSolutions_Solution = new DataRelation("Solutions_Solution", new DataColumn[] {
                        this.tableSolutions.Solutions_IdColumn}, new DataColumn[] {
                        this.tableSolution.Solutions_IdColumn}, false);
            this.relationSolutions_Solution.Nested = true;
            this.Relations.Add(this.relationSolutions_Solution);
            this.relationdeps_dep = new DataRelation("deps_dep", new DataColumn[] {
                        this.tabledeps.deps_IdColumn}, new DataColumn[] {
                        this.tabledep.deps_IdColumn}, false);
            this.relationdeps_dep.Nested = true;
            this.Relations.Add(this.relationdeps_dep);
            this.relationTemplate_deps = new DataRelation("Template_deps", new DataColumn[] {
                        this.tableTemplate.Template_IdColumn}, new DataColumn[] {
                        this.tabledeps.Template_IdColumn}, false);
            this.relationTemplate_deps.Nested = true;
            this.Relations.Add(this.relationTemplate_deps);
            this.relationTemplates_Template = new DataRelation("Templates_Template", new DataColumn[] {
                        this.tableTemplates.Templates_IdColumn}, new DataColumn[] {
                        this.tableTemplate.Templates_IdColumn}, false);
            this.relationTemplates_Template.Nested = true;
            this.Relations.Add(this.relationTemplates_Template);
            this.relationCustomCode_Code = new DataRelation("CustomCode_Code", new DataColumn[] {
                        this.tableCustomCode.CustomCode_IdColumn}, new DataColumn[] {
                        this.tableCode.CustomCode_IdColumn}, false);
            this.relationCustomCode_Code.Nested = true;
            this.Relations.Add(this.relationCustomCode_Code);
            this.relationTemplateProject_Editor = new DataRelation("TemplateProject_Editor", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableEditor.TemplateProject_IdColumn}, false);
            this.relationTemplateProject_Editor.Nested = true;
            this.Relations.Add(this.relationTemplateProject_Editor);
            this.relationTemplateProject_Templates = new DataRelation("TemplateProject_Templates", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableTemplates.TemplateProject_IdColumn}, false);
            this.relationTemplateProject_Templates.Nested = true;
            this.Relations.Add(this.relationTemplateProject_Templates);
            this.relationTemplateProject_CustomCode = new DataRelation("TemplateProject_CustomCode", new DataColumn[] {
                        this.tableTemplateProject.TemplateProject_IdColumn}, new DataColumn[] {
                        this.tableCustomCode.TemplateProject_IdColumn}, false);
            this.relationTemplateProject_CustomCode.Nested = true;
            this.Relations.Add(this.relationTemplateProject_CustomCode);
            this.relationCompiledProject_CompiledTemplate = new DataRelation("CompiledProject_CompiledTemplate", new DataColumn[] {
                        this.tableCompiledProject.CompiledProject_IdColumn}, new DataColumn[] {
                        this.tableCompiledTemplate.CompiledProject_IdColumn}, false);
            this.relationCompiledProject_CompiledTemplate.Nested = true;
            this.Relations.Add(this.relationCompiledProject_CompiledTemplate);
        }
        
        private bool ShouldSerializeSolutions() {
            return false;
        }
        
        private bool ShouldSerializeSolution() {
            return false;
        }
        
        private bool ShouldSerializeProjects() {
            return false;
        }
        
        private bool ShouldSerializeProject() {
            return false;
        }
        
        private bool ShouldSerialize_ref() {
            return false;
        }
        
        private bool ShouldSerializeTemplateProject() {
            return false;
        }
        
        private bool ShouldSerializeEditor() {
            return false;
        }
        
        private bool ShouldSerializeTemplates() {
            return false;
        }
        
        private bool ShouldSerializeTemplate() {
            return false;
        }
        
        private bool ShouldSerializedeps() {
            return false;
        }
        
        private bool ShouldSerializedep() {
            return false;
        }
        
        private bool ShouldSerializeCustomCode() {
            return false;
        }
        
        private bool ShouldSerializeCode() {
            return false;
        }
        
        private bool ShouldSerializeCompiledProject() {
            return false;
        }
        
        private bool ShouldSerializeCompiledTemplate() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SolutionsRowChangeEventHandler(object sender, SolutionsRowChangeEvent e);
        
        public delegate void SolutionRowChangeEventHandler(object sender, SolutionRowChangeEvent e);
        
        public delegate void ProjectsRowChangeEventHandler(object sender, ProjectsRowChangeEvent e);
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void _refRowChangeEventHandler(object sender, _refRowChangeEvent e);
        
        public delegate void TemplateProjectRowChangeEventHandler(object sender, TemplateProjectRowChangeEvent e);
        
        public delegate void EditorRowChangeEventHandler(object sender, EditorRowChangeEvent e);
        
        public delegate void TemplatesRowChangeEventHandler(object sender, TemplatesRowChangeEvent e);
        
        public delegate void TemplateRowChangeEventHandler(object sender, TemplateRowChangeEvent e);
        
        public delegate void depsRowChangeEventHandler(object sender, depsRowChangeEvent e);
        
        public delegate void depRowChangeEventHandler(object sender, depRowChangeEvent e);
        
        public delegate void CustomCodeRowChangeEventHandler(object sender, CustomCodeRowChangeEvent e);
        
        public delegate void CodeRowChangeEventHandler(object sender, CodeRowChangeEvent e);
        
        public delegate void CompiledProjectRowChangeEventHandler(object sender, CompiledProjectRowChangeEvent e);
        
        public delegate void CompiledTemplateRowChangeEventHandler(object sender, CompiledTemplateRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSolutions_Id;
            
            internal SolutionsDataTable() : 
                    base("Solutions") {
                this.InitClass();
            }
            
            internal SolutionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Solutions_IdColumn {
                get {
                    return this.columnSolutions_Id;
                }
            }
            
            public SolutionsRow this[int index] {
                get {
                    return ((SolutionsRow)(this.Rows[index]));
                }
            }
            
            public event SolutionsRowChangeEventHandler SolutionsRowChanged;
            
            public event SolutionsRowChangeEventHandler SolutionsRowChanging;
            
            public event SolutionsRowChangeEventHandler SolutionsRowDeleted;
            
            public event SolutionsRowChangeEventHandler SolutionsRowDeleting;
            
            public void AddSolutionsRow(SolutionsRow row) {
                this.Rows.Add(row);
            }
            
            public SolutionsRow AddSolutionsRow() {
                SolutionsRow rowSolutionsRow = ((SolutionsRow)(this.NewRow()));
                rowSolutionsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowSolutionsRow);
                return rowSolutionsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SolutionsDataTable cln = ((SolutionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SolutionsDataTable();
            }
            
            internal void InitVars() {
                this.columnSolutions_Id = this.Columns["Solutions_Id"];
            }
            
            private void InitClass() {
                this.columnSolutions_Id = new DataColumn("Solutions_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSolutions_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSolutions_Id}, true));
                this.columnSolutions_Id.AutoIncrement = true;
                this.columnSolutions_Id.AllowDBNull = false;
                this.columnSolutions_Id.Unique = true;
            }
            
            public SolutionsRow NewSolutionsRow() {
                return ((SolutionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SolutionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SolutionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolutionsRowChanged != null)) {
                    this.SolutionsRowChanged(this, new SolutionsRowChangeEvent(((SolutionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolutionsRowChanging != null)) {
                    this.SolutionsRowChanging(this, new SolutionsRowChangeEvent(((SolutionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolutionsRowDeleted != null)) {
                    this.SolutionsRowDeleted(this, new SolutionsRowChangeEvent(((SolutionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolutionsRowDeleting != null)) {
                    this.SolutionsRowDeleting(this, new SolutionsRowChangeEvent(((SolutionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSolutionsRow(SolutionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionsRow : DataRow {
            
            private SolutionsDataTable tableSolutions;
            
            internal SolutionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolutions = ((SolutionsDataTable)(this.Table));
            }
            
            public SolutionRow[] GetSolutionRows() {
                return ((SolutionRow[])(this.GetChildRows(this.Table.ChildRelations["Solutions_Solution"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionsRowChangeEvent : EventArgs {
            
            private SolutionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SolutionsRowChangeEvent(SolutionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SolutionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnSolution_Id;
            
            private DataColumn columnSolutions_Id;
            
            internal SolutionDataTable() : 
                    base("Solution") {
                this.InitClass();
            }
            
            internal SolutionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn Solution_IdColumn {
                get {
                    return this.columnSolution_Id;
                }
            }
            
            internal DataColumn Solutions_IdColumn {
                get {
                    return this.columnSolutions_Id;
                }
            }
            
            public SolutionRow this[int index] {
                get {
                    return ((SolutionRow)(this.Rows[index]));
                }
            }
            
            public event SolutionRowChangeEventHandler SolutionRowChanged;
            
            public event SolutionRowChangeEventHandler SolutionRowChanging;
            
            public event SolutionRowChangeEventHandler SolutionRowDeleted;
            
            public event SolutionRowChangeEventHandler SolutionRowDeleting;
            
            public void AddSolutionRow(SolutionRow row) {
                this.Rows.Add(row);
            }
            
            public SolutionRow AddSolutionRow(string name, SolutionsRow parentSolutionsRowBySolutions_Solution) {
                SolutionRow rowSolutionRow = ((SolutionRow)(this.NewRow()));
                rowSolutionRow.ItemArray = new object[] {
                        name,
                        null,
                        parentSolutionsRowBySolutions_Solution[0]};
                this.Rows.Add(rowSolutionRow);
                return rowSolutionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SolutionDataTable cln = ((SolutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SolutionDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnSolution_Id = this.Columns["Solution_Id"];
                this.columnSolutions_Id = this.Columns["Solutions_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnSolution_Id = new DataColumn("Solution_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSolution_Id);
                this.columnSolutions_Id = new DataColumn("Solutions_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSolutions_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSolution_Id}, true));
                this.columnname.Namespace = "";
                this.columnSolution_Id.AutoIncrement = true;
                this.columnSolution_Id.AllowDBNull = false;
                this.columnSolution_Id.Unique = true;
            }
            
            public SolutionRow NewSolutionRow() {
                return ((SolutionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SolutionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SolutionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolutionRowChanged != null)) {
                    this.SolutionRowChanged(this, new SolutionRowChangeEvent(((SolutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolutionRowChanging != null)) {
                    this.SolutionRowChanging(this, new SolutionRowChangeEvent(((SolutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolutionRowDeleted != null)) {
                    this.SolutionRowDeleted(this, new SolutionRowChangeEvent(((SolutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolutionRowDeleting != null)) {
                    this.SolutionRowDeleting(this, new SolutionRowChangeEvent(((SolutionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSolutionRow(SolutionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionRow : DataRow {
            
            private SolutionDataTable tableSolution;
            
            internal SolutionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolution = ((SolutionDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableSolution.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSolution.nameColumn] = value;
                }
            }
            
            public SolutionsRow SolutionsRow {
                get {
                    return ((SolutionsRow)(this.GetParentRow(this.Table.ParentRelations["Solutions_Solution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Solutions_Solution"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableSolution.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableSolution.nameColumn] = System.Convert.DBNull;
            }
            
            public ProjectsRow[] GetProjectsRows() {
                return ((ProjectsRow[])(this.GetChildRows(this.Table.ChildRelations["Solution_Projects"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolutionRowChangeEvent : EventArgs {
            
            private SolutionRow eventRow;
            
            private DataRowAction eventAction;
            
            public SolutionRowChangeEvent(SolutionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SolutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjects_Id;
            
            private DataColumn columnSolution_Id;
            
            internal ProjectsDataTable() : 
                    base("Projects") {
                this.InitClass();
            }
            
            internal ProjectsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Projects_IdColumn {
                get {
                    return this.columnProjects_Id;
                }
            }
            
            internal DataColumn Solution_IdColumn {
                get {
                    return this.columnSolution_Id;
                }
            }
            
            public ProjectsRow this[int index] {
                get {
                    return ((ProjectsRow)(this.Rows[index]));
                }
            }
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanged;
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanging;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleted;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleting;
            
            public void AddProjectsRow(ProjectsRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectsRow AddProjectsRow(SolutionRow parentSolutionRowBySolution_Projects) {
                ProjectsRow rowProjectsRow = ((ProjectsRow)(this.NewRow()));
                rowProjectsRow.ItemArray = new object[] {
                        null,
                        parentSolutionRowBySolution_Projects[1]};
                this.Rows.Add(rowProjectsRow);
                return rowProjectsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectsDataTable cln = ((ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectsDataTable();
            }
            
            internal void InitVars() {
                this.columnProjects_Id = this.Columns["Projects_Id"];
                this.columnSolution_Id = this.Columns["Solution_Id"];
            }
            
            private void InitClass() {
                this.columnProjects_Id = new DataColumn("Projects_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProjects_Id);
                this.columnSolution_Id = new DataColumn("Solution_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSolution_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProjects_Id}, true));
                this.columnProjects_Id.AutoIncrement = true;
                this.columnProjects_Id.AllowDBNull = false;
                this.columnProjects_Id.Unique = true;
            }
            
            public ProjectsRow NewProjectsRow() {
                return ((ProjectsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectsRowChanged != null)) {
                    this.ProjectsRowChanged(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectsRowChanging != null)) {
                    this.ProjectsRowChanging(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectsRowDeleted != null)) {
                    this.ProjectsRowDeleted(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectsRowDeleting != null)) {
                    this.ProjectsRowDeleting(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectsRow(ProjectsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsRow : DataRow {
            
            private ProjectsDataTable tableProjects;
            
            internal ProjectsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjects = ((ProjectsDataTable)(this.Table));
            }
            
            public SolutionRow SolutionRow {
                get {
                    return ((SolutionRow)(this.GetParentRow(this.Table.ParentRelations["Solution_Projects"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Solution_Projects"]);
                }
            }
            
            public ProjectRow[] GetProjectRows() {
                return ((ProjectRow[])(this.GetChildRows(this.Table.ChildRelations["Projects_Project"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsRowChangeEvent : EventArgs {
            
            private ProjectsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectsRowChangeEvent(ProjectsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columntype;
            
            private DataColumn columnProject_Id;
            
            private DataColumn columnProjects_Id;
            
            internal ProjectDataTable() : 
                    base("Project") {
                this.InitClass();
            }
            
            internal ProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn Project_IdColumn {
                get {
                    return this.columnProject_Id;
                }
            }
            
            internal DataColumn Projects_IdColumn {
                get {
                    return this.columnProjects_Id;
                }
            }
            
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectRow AddProjectRow(string name, string type, ProjectsRow parentProjectsRowByProjects_Project) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                rowProjectRow.ItemArray = new object[] {
                        name,
                        type,
                        null,
                        parentProjectsRowByProjects_Project[0]};
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columntype = this.Columns["type"];
                this.columnProject_Id = this.Columns["Project_Id"];
                this.columnProjects_Id = this.Columns["Projects_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnProject_Id = new DataColumn("Project_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProject_Id);
                this.columnProjects_Id = new DataColumn("Projects_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProjects_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProject_Id}, true));
                this.columnname.Namespace = "";
                this.columntype.Namespace = "";
                this.columnProject_Id.AutoIncrement = true;
                this.columnProject_Id.AllowDBNull = false;
                this.columnProject_Id.Unique = true;
            }
            
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRow : DataRow {
            
            private ProjectDataTable tableProject;
            
            internal ProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableProject.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.nameColumn] = value;
                }
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableProject.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.typeColumn] = value;
                }
            }
            
            public ProjectsRow ProjectsRow {
                get {
                    return ((ProjectsRow)(this.GetParentRow(this.Table.ParentRelations["Projects_Project"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Projects_Project"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableProject.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableProject.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableProject.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableProject.typeColumn] = System.Convert.DBNull;
            }
            
            public _refRow[] GetrefRows() {
                return ((_refRow[])(this.GetChildRows(this.Table.ChildRelations["Project_ref"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRowChangeEvent : EventArgs {
            
            private ProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectRowChangeEvent(ProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _refDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnassembly;
            
            private DataColumn columnproject;
            
            private DataColumn columnProject_Id;
            
            internal _refDataTable() : 
                    base("ref") {
                this.InitClass();
            }
            
            internal _refDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn assemblyColumn {
                get {
                    return this.columnassembly;
                }
            }
            
            internal DataColumn projectColumn {
                get {
                    return this.columnproject;
                }
            }
            
            internal DataColumn Project_IdColumn {
                get {
                    return this.columnProject_Id;
                }
            }
            
            public _refRow this[int index] {
                get {
                    return ((_refRow)(this.Rows[index]));
                }
            }
            
            public event _refRowChangeEventHandler _refRowChanged;
            
            public event _refRowChangeEventHandler _refRowChanging;
            
            public event _refRowChangeEventHandler _refRowDeleted;
            
            public event _refRowChangeEventHandler _refRowDeleting;
            
            public void Add_refRow(_refRow row) {
                this.Rows.Add(row);
            }
            
            public _refRow Add_refRow(string assembly, string project, ProjectRow parentProjectRowByProject_ref) {
                _refRow row_refRow = ((_refRow)(this.NewRow()));
                row_refRow.ItemArray = new object[] {
                        assembly,
                        project,
                        parentProjectRowByProject_ref[2]};
                this.Rows.Add(row_refRow);
                return row_refRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                _refDataTable cln = ((_refDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new _refDataTable();
            }
            
            internal void InitVars() {
                this.columnassembly = this.Columns["assembly"];
                this.columnproject = this.Columns["project"];
                this.columnProject_Id = this.Columns["Project_Id"];
            }
            
            private void InitClass() {
                this.columnassembly = new DataColumn("assembly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnassembly);
                this.columnproject = new DataColumn("project", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnproject);
                this.columnProject_Id = new DataColumn("Project_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProject_Id);
                this.columnassembly.Namespace = "";
                this.columnproject.Namespace = "";
            }
            
            public _refRow New_refRow() {
                return ((_refRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new _refRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(_refRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._refRowChanged != null)) {
                    this._refRowChanged(this, new _refRowChangeEvent(((_refRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._refRowChanging != null)) {
                    this._refRowChanging(this, new _refRowChangeEvent(((_refRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._refRowDeleted != null)) {
                    this._refRowDeleted(this, new _refRowChangeEvent(((_refRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._refRowDeleting != null)) {
                    this._refRowDeleting(this, new _refRowChangeEvent(((_refRow)(e.Row)), e.Action));
                }
            }
            
            public void Remove_refRow(_refRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _refRow : DataRow {
            
            private _refDataTable table_ref;
            
            internal _refRow(DataRowBuilder rb) : 
                    base(rb) {
                this.table_ref = ((_refDataTable)(this.Table));
            }
            
            public string assembly {
                get {
                    try {
                        return ((string)(this[this.table_ref.assemblyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ref.assemblyColumn] = value;
                }
            }
            
            public string project {
                get {
                    try {
                        return ((string)(this[this.table_ref.projectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_ref.projectColumn] = value;
                }
            }
            
            public ProjectRow ProjectRow {
                get {
                    return ((ProjectRow)(this.GetParentRow(this.Table.ParentRelations["Project_ref"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Project_ref"]);
                }
            }
            
            public bool IsassemblyNull() {
                return this.IsNull(this.table_ref.assemblyColumn);
            }
            
            public void SetassemblyNull() {
                this[this.table_ref.assemblyColumn] = System.Convert.DBNull;
            }
            
            public bool IsprojectNull() {
                return this.IsNull(this.table_ref.projectColumn);
            }
            
            public void SetprojectNull() {
                this[this.table_ref.projectColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _refRowChangeEvent : EventArgs {
            
            private _refRow eventRow;
            
            private DataRowAction eventAction;
            
            public _refRowChangeEvent(_refRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public _refRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnAuthor;
            
            private DataColumn columnVersion;
            
            private DataColumn columnCopyright;
            
            private DataColumn columnsolution;
            
            private DataColumn columnTemplateProject_Id;
            
            internal TemplateProjectDataTable() : 
                    base("TemplateProject") {
                this.InitClass();
            }
            
            internal TemplateProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn AuthorColumn {
                get {
                    return this.columnAuthor;
                }
            }
            
            internal DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            internal DataColumn CopyrightColumn {
                get {
                    return this.columnCopyright;
                }
            }
            
            internal DataColumn solutionColumn {
                get {
                    return this.columnsolution;
                }
            }
            
            internal DataColumn TemplateProject_IdColumn {
                get {
                    return this.columnTemplateProject_Id;
                }
            }
            
            public TemplateProjectRow this[int index] {
                get {
                    return ((TemplateProjectRow)(this.Rows[index]));
                }
            }
            
            public event TemplateProjectRowChangeEventHandler TemplateProjectRowChanged;
            
            public event TemplateProjectRowChangeEventHandler TemplateProjectRowChanging;
            
            public event TemplateProjectRowChangeEventHandler TemplateProjectRowDeleted;
            
            public event TemplateProjectRowChangeEventHandler TemplateProjectRowDeleting;
            
            public void AddTemplateProjectRow(TemplateProjectRow row) {
                this.Rows.Add(row);
            }
            
            public TemplateProjectRow AddTemplateProjectRow(string Name, string Description, string Author, string Version, string Copyright, string solution) {
                TemplateProjectRow rowTemplateProjectRow = ((TemplateProjectRow)(this.NewRow()));
                rowTemplateProjectRow.ItemArray = new object[] {
                        Name,
                        Description,
                        Author,
                        Version,
                        Copyright,
                        solution,
                        null};
                this.Rows.Add(rowTemplateProjectRow);
                return rowTemplateProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TemplateProjectDataTable cln = ((TemplateProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TemplateProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnAuthor = this.Columns["Author"];
                this.columnVersion = this.Columns["Version"];
                this.columnCopyright = this.Columns["Copyright"];
                this.columnsolution = this.Columns["solution"];
                this.columnTemplateProject_Id = this.Columns["TemplateProject_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnAuthor = new DataColumn("Author", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthor);
                this.columnVersion = new DataColumn("Version", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVersion);
                this.columnCopyright = new DataColumn("Copyright", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCopyright);
                this.columnsolution = new DataColumn("solution", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnsolution);
                this.columnTemplateProject_Id = new DataColumn("TemplateProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplateProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTemplateProject_Id}, true));
                this.columnsolution.Namespace = "";
                this.columnTemplateProject_Id.AutoIncrement = true;
                this.columnTemplateProject_Id.AllowDBNull = false;
                this.columnTemplateProject_Id.Unique = true;
            }
            
            public TemplateProjectRow NewTemplateProjectRow() {
                return ((TemplateProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TemplateProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TemplateProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateProjectRowChanged != null)) {
                    this.TemplateProjectRowChanged(this, new TemplateProjectRowChangeEvent(((TemplateProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateProjectRowChanging != null)) {
                    this.TemplateProjectRowChanging(this, new TemplateProjectRowChangeEvent(((TemplateProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateProjectRowDeleted != null)) {
                    this.TemplateProjectRowDeleted(this, new TemplateProjectRowChangeEvent(((TemplateProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateProjectRowDeleting != null)) {
                    this.TemplateProjectRowDeleting(this, new TemplateProjectRowChangeEvent(((TemplateProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTemplateProjectRow(TemplateProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateProjectRow : DataRow {
            
            private TemplateProjectDataTable tableTemplateProject;
            
            internal TemplateProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateProject = ((TemplateProjectDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.DescriptionColumn] = value;
                }
            }
            
            public string Author {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.AuthorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.AuthorColumn] = value;
                }
            }
            
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.VersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.VersionColumn] = value;
                }
            }
            
            public string Copyright {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.CopyrightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.CopyrightColumn] = value;
                }
            }
            
            public string solution {
                get {
                    try {
                        return ((string)(this[this.tableTemplateProject.solutionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateProject.solutionColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableTemplateProject.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableTemplateProject.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTemplateProject.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableTemplateProject.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAuthorNull() {
                return this.IsNull(this.tableTemplateProject.AuthorColumn);
            }
            
            public void SetAuthorNull() {
                this[this.tableTemplateProject.AuthorColumn] = System.Convert.DBNull;
            }
            
            public bool IsVersionNull() {
                return this.IsNull(this.tableTemplateProject.VersionColumn);
            }
            
            public void SetVersionNull() {
                this[this.tableTemplateProject.VersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCopyrightNull() {
                return this.IsNull(this.tableTemplateProject.CopyrightColumn);
            }
            
            public void SetCopyrightNull() {
                this[this.tableTemplateProject.CopyrightColumn] = System.Convert.DBNull;
            }
            
            public bool IssolutionNull() {
                return this.IsNull(this.tableTemplateProject.solutionColumn);
            }
            
            public void SetsolutionNull() {
                this[this.tableTemplateProject.solutionColumn] = System.Convert.DBNull;
            }
            
            public EditorRow[] GetEditorRows() {
                return ((EditorRow[])(this.GetChildRows(this.Table.ChildRelations["TemplateProject_Editor"])));
            }
            
            public TemplatesRow[] GetTemplatesRows() {
                return ((TemplatesRow[])(this.GetChildRows(this.Table.ChildRelations["TemplateProject_Templates"])));
            }
            
            public CustomCodeRow[] GetCustomCodeRows() {
                return ((CustomCodeRow[])(this.GetChildRows(this.Table.ChildRelations["TemplateProject_CustomCode"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateProjectRowChangeEvent : EventArgs {
            
            private TemplateProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public TemplateProjectRowChangeEvent(TemplateProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TemplateProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EditorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnassembly;
            
            private DataColumn column_class;
            
            private DataColumn columnTemplateProject_Id;
            
            internal EditorDataTable() : 
                    base("Editor") {
                this.InitClass();
            }
            
            internal EditorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn assemblyColumn {
                get {
                    return this.columnassembly;
                }
            }
            
            internal DataColumn _classColumn {
                get {
                    return this.column_class;
                }
            }
            
            internal DataColumn TemplateProject_IdColumn {
                get {
                    return this.columnTemplateProject_Id;
                }
            }
            
            public EditorRow this[int index] {
                get {
                    return ((EditorRow)(this.Rows[index]));
                }
            }
            
            public event EditorRowChangeEventHandler EditorRowChanged;
            
            public event EditorRowChangeEventHandler EditorRowChanging;
            
            public event EditorRowChangeEventHandler EditorRowDeleted;
            
            public event EditorRowChangeEventHandler EditorRowDeleting;
            
            public void AddEditorRow(EditorRow row) {
                this.Rows.Add(row);
            }
            
            public EditorRow AddEditorRow(string assembly, string _class, TemplateProjectRow parentTemplateProjectRowByTemplateProject_Editor) {
                EditorRow rowEditorRow = ((EditorRow)(this.NewRow()));
                rowEditorRow.ItemArray = new object[] {
                        assembly,
                        _class,
                        parentTemplateProjectRowByTemplateProject_Editor[6]};
                this.Rows.Add(rowEditorRow);
                return rowEditorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EditorDataTable cln = ((EditorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EditorDataTable();
            }
            
            internal void InitVars() {
                this.columnassembly = this.Columns["assembly"];
                this.column_class = this.Columns["class"];
                this.columnTemplateProject_Id = this.Columns["TemplateProject_Id"];
            }
            
            private void InitClass() {
                this.columnassembly = new DataColumn("assembly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnassembly);
                this.column_class = new DataColumn("class", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_class);
                this.columnTemplateProject_Id = new DataColumn("TemplateProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplateProject_Id);
                this.columnassembly.Namespace = "";
                this.column_class.Namespace = "";
            }
            
            public EditorRow NewEditorRow() {
                return ((EditorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EditorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EditorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EditorRowChanged != null)) {
                    this.EditorRowChanged(this, new EditorRowChangeEvent(((EditorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EditorRowChanging != null)) {
                    this.EditorRowChanging(this, new EditorRowChangeEvent(((EditorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EditorRowDeleted != null)) {
                    this.EditorRowDeleted(this, new EditorRowChangeEvent(((EditorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EditorRowDeleting != null)) {
                    this.EditorRowDeleting(this, new EditorRowChangeEvent(((EditorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEditorRow(EditorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EditorRow : DataRow {
            
            private EditorDataTable tableEditor;
            
            internal EditorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEditor = ((EditorDataTable)(this.Table));
            }
            
            public string assembly {
                get {
                    try {
                        return ((string)(this[this.tableEditor.assemblyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditor.assemblyColumn] = value;
                }
            }
            
            public string _class {
                get {
                    try {
                        return ((string)(this[this.tableEditor._classColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditor._classColumn] = value;
                }
            }
            
            public TemplateProjectRow TemplateProjectRow {
                get {
                    return ((TemplateProjectRow)(this.GetParentRow(this.Table.ParentRelations["TemplateProject_Editor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TemplateProject_Editor"]);
                }
            }
            
            public bool IsassemblyNull() {
                return this.IsNull(this.tableEditor.assemblyColumn);
            }
            
            public void SetassemblyNull() {
                this[this.tableEditor.assemblyColumn] = System.Convert.DBNull;
            }
            
            public bool Is_classNull() {
                return this.IsNull(this.tableEditor._classColumn);
            }
            
            public void Set_classNull() {
                this[this.tableEditor._classColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EditorRowChangeEvent : EventArgs {
            
            private EditorRow eventRow;
            
            private DataRowAction eventAction;
            
            public EditorRowChangeEvent(EditorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EditorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplatesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTemplates_Id;
            
            private DataColumn columnTemplateProject_Id;
            
            internal TemplatesDataTable() : 
                    base("Templates") {
                this.InitClass();
            }
            
            internal TemplatesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Templates_IdColumn {
                get {
                    return this.columnTemplates_Id;
                }
            }
            
            internal DataColumn TemplateProject_IdColumn {
                get {
                    return this.columnTemplateProject_Id;
                }
            }
            
            public TemplatesRow this[int index] {
                get {
                    return ((TemplatesRow)(this.Rows[index]));
                }
            }
            
            public event TemplatesRowChangeEventHandler TemplatesRowChanged;
            
            public event TemplatesRowChangeEventHandler TemplatesRowChanging;
            
            public event TemplatesRowChangeEventHandler TemplatesRowDeleted;
            
            public event TemplatesRowChangeEventHandler TemplatesRowDeleting;
            
            public void AddTemplatesRow(TemplatesRow row) {
                this.Rows.Add(row);
            }
            
            public TemplatesRow AddTemplatesRow(TemplateProjectRow parentTemplateProjectRowByTemplateProject_Templates) {
                TemplatesRow rowTemplatesRow = ((TemplatesRow)(this.NewRow()));
                rowTemplatesRow.ItemArray = new object[] {
                        null,
                        parentTemplateProjectRowByTemplateProject_Templates[6]};
                this.Rows.Add(rowTemplatesRow);
                return rowTemplatesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TemplatesDataTable cln = ((TemplatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TemplatesDataTable();
            }
            
            internal void InitVars() {
                this.columnTemplates_Id = this.Columns["Templates_Id"];
                this.columnTemplateProject_Id = this.Columns["TemplateProject_Id"];
            }
            
            private void InitClass() {
                this.columnTemplates_Id = new DataColumn("Templates_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplates_Id);
                this.columnTemplateProject_Id = new DataColumn("TemplateProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplateProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTemplates_Id}, true));
                this.columnTemplates_Id.AutoIncrement = true;
                this.columnTemplates_Id.AllowDBNull = false;
                this.columnTemplates_Id.Unique = true;
            }
            
            public TemplatesRow NewTemplatesRow() {
                return ((TemplatesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TemplatesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TemplatesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplatesRowChanged != null)) {
                    this.TemplatesRowChanged(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplatesRowChanging != null)) {
                    this.TemplatesRowChanging(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplatesRowDeleted != null)) {
                    this.TemplatesRowDeleted(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplatesRowDeleting != null)) {
                    this.TemplatesRowDeleting(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTemplatesRow(TemplatesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplatesRow : DataRow {
            
            private TemplatesDataTable tableTemplates;
            
            internal TemplatesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplates = ((TemplatesDataTable)(this.Table));
            }
            
            public TemplateProjectRow TemplateProjectRow {
                get {
                    return ((TemplateProjectRow)(this.GetParentRow(this.Table.ParentRelations["TemplateProject_Templates"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TemplateProject_Templates"]);
                }
            }
            
            public TemplateRow[] GetTemplateRows() {
                return ((TemplateRow[])(this.GetChildRows(this.Table.ChildRelations["Templates_Template"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplatesRowChangeEvent : EventArgs {
            
            private TemplatesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TemplatesRowChangeEvent(TemplatesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TemplatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntype;
            
            private DataColumn columntemplateFile;
            
            private DataColumn columnoutputFileName;
            
            private DataColumn columnoutputFileExtension;
            
            private DataColumn columnoutputDirectory;
            
            private DataColumn columnclassName;
            
            private DataColumn columnoverWrite;
            
            private DataColumn columnproject;
            
            private DataColumn columnTemplate_Id;
            
            private DataColumn columnTemplates_Id;
            
            internal TemplateDataTable() : 
                    base("Template") {
                this.InitClass();
            }
            
            internal TemplateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn templateFileColumn {
                get {
                    return this.columntemplateFile;
                }
            }
            
            internal DataColumn outputFileNameColumn {
                get {
                    return this.columnoutputFileName;
                }
            }
            
            internal DataColumn outputFileExtensionColumn {
                get {
                    return this.columnoutputFileExtension;
                }
            }
            
            internal DataColumn outputDirectoryColumn {
                get {
                    return this.columnoutputDirectory;
                }
            }
            
            internal DataColumn classNameColumn {
                get {
                    return this.columnclassName;
                }
            }
            
            internal DataColumn overWriteColumn {
                get {
                    return this.columnoverWrite;
                }
            }
            
            internal DataColumn projectColumn {
                get {
                    return this.columnproject;
                }
            }
            
            internal DataColumn Template_IdColumn {
                get {
                    return this.columnTemplate_Id;
                }
            }
            
            internal DataColumn Templates_IdColumn {
                get {
                    return this.columnTemplates_Id;
                }
            }
            
            public TemplateRow this[int index] {
                get {
                    return ((TemplateRow)(this.Rows[index]));
                }
            }
            
            public event TemplateRowChangeEventHandler TemplateRowChanged;
            
            public event TemplateRowChangeEventHandler TemplateRowChanging;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleted;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleting;
            
            public void AddTemplateRow(TemplateRow row) {
                this.Rows.Add(row);
            }
            
            public TemplateRow AddTemplateRow(string type, string templateFile, string outputFileName, string outputFileExtension, string outputDirectory, string className, string overWrite, string project, TemplatesRow parentTemplatesRowByTemplates_Template) {
                TemplateRow rowTemplateRow = ((TemplateRow)(this.NewRow()));
                rowTemplateRow.ItemArray = new object[] {
                        type,
                        templateFile,
                        outputFileName,
                        outputFileExtension,
                        outputDirectory,
                        className,
                        overWrite,
                        project,
                        null,
                        parentTemplatesRowByTemplates_Template[0]};
                this.Rows.Add(rowTemplateRow);
                return rowTemplateRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TemplateDataTable cln = ((TemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TemplateDataTable();
            }
            
            internal void InitVars() {
                this.columntype = this.Columns["type"];
                this.columntemplateFile = this.Columns["templateFile"];
                this.columnoutputFileName = this.Columns["outputFileName"];
                this.columnoutputFileExtension = this.Columns["outputFileExtension"];
                this.columnoutputDirectory = this.Columns["outputDirectory"];
                this.columnclassName = this.Columns["className"];
                this.columnoverWrite = this.Columns["overWrite"];
                this.columnproject = this.Columns["project"];
                this.columnTemplate_Id = this.Columns["Template_Id"];
                this.columnTemplates_Id = this.Columns["Templates_Id"];
            }
            
            private void InitClass() {
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columntemplateFile = new DataColumn("templateFile", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntemplateFile);
                this.columnoutputFileName = new DataColumn("outputFileName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnoutputFileName);
                this.columnoutputFileExtension = new DataColumn("outputFileExtension", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnoutputFileExtension);
                this.columnoutputDirectory = new DataColumn("outputDirectory", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnoutputDirectory);
                this.columnclassName = new DataColumn("className", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnclassName);
                this.columnoverWrite = new DataColumn("overWrite", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnoverWrite);
                this.columnproject = new DataColumn("project", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnproject);
                this.columnTemplate_Id = new DataColumn("Template_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplate_Id);
                this.columnTemplates_Id = new DataColumn("Templates_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplates_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTemplate_Id}, true));
                this.columntype.Namespace = "";
                this.columntemplateFile.Namespace = "";
                this.columnoutputFileName.Namespace = "";
                this.columnoutputFileExtension.Namespace = "";
                this.columnoutputDirectory.Namespace = "";
                this.columnclassName.Namespace = "";
                this.columnoverWrite.Namespace = "";
                this.columnproject.Namespace = "";
                this.columnTemplate_Id.AutoIncrement = true;
                this.columnTemplate_Id.AllowDBNull = false;
                this.columnTemplate_Id.Unique = true;
            }
            
            public TemplateRow NewTemplateRow() {
                return ((TemplateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TemplateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TemplateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateRowChanged != null)) {
                    this.TemplateRowChanged(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateRowChanging != null)) {
                    this.TemplateRowChanging(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateRowDeleted != null)) {
                    this.TemplateRowDeleted(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateRowDeleting != null)) {
                    this.TemplateRowDeleting(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTemplateRow(TemplateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateRow : DataRow {
            
            private TemplateDataTable tableTemplate;
            
            internal TemplateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplate = ((TemplateDataTable)(this.Table));
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.typeColumn] = value;
                }
            }
            
            public string templateFile {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.templateFileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.templateFileColumn] = value;
                }
            }
            
            public string outputFileName {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.outputFileNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.outputFileNameColumn] = value;
                }
            }
            
            public string outputFileExtension {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.outputFileExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.outputFileExtensionColumn] = value;
                }
            }
            
            public string outputDirectory {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.outputDirectoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.outputDirectoryColumn] = value;
                }
            }
            
            public string className {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.classNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.classNameColumn] = value;
                }
            }
            
            public string overWrite {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.overWriteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.overWriteColumn] = value;
                }
            }
            
            public string project {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.projectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.projectColumn] = value;
                }
            }
            
            public TemplatesRow TemplatesRow {
                get {
                    return ((TemplatesRow)(this.GetParentRow(this.Table.ParentRelations["Templates_Template"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Templates_Template"]);
                }
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableTemplate.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableTemplate.typeColumn] = System.Convert.DBNull;
            }
            
            public bool IstemplateFileNull() {
                return this.IsNull(this.tableTemplate.templateFileColumn);
            }
            
            public void SettemplateFileNull() {
                this[this.tableTemplate.templateFileColumn] = System.Convert.DBNull;
            }
            
            public bool IsoutputFileNameNull() {
                return this.IsNull(this.tableTemplate.outputFileNameColumn);
            }
            
            public void SetoutputFileNameNull() {
                this[this.tableTemplate.outputFileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsoutputFileExtensionNull() {
                return this.IsNull(this.tableTemplate.outputFileExtensionColumn);
            }
            
            public void SetoutputFileExtensionNull() {
                this[this.tableTemplate.outputFileExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsoutputDirectoryNull() {
                return this.IsNull(this.tableTemplate.outputDirectoryColumn);
            }
            
            public void SetoutputDirectoryNull() {
                this[this.tableTemplate.outputDirectoryColumn] = System.Convert.DBNull;
            }
            
            public bool IsclassNameNull() {
                return this.IsNull(this.tableTemplate.classNameColumn);
            }
            
            public void SetclassNameNull() {
                this[this.tableTemplate.classNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsoverWriteNull() {
                return this.IsNull(this.tableTemplate.overWriteColumn);
            }
            
            public void SetoverWriteNull() {
                this[this.tableTemplate.overWriteColumn] = System.Convert.DBNull;
            }
            
            public bool IsprojectNull() {
                return this.IsNull(this.tableTemplate.projectColumn);
            }
            
            public void SetprojectNull() {
                this[this.tableTemplate.projectColumn] = System.Convert.DBNull;
            }
            
            public depsRow[] GetdepsRows() {
                return ((depsRow[])(this.GetChildRows(this.Table.ChildRelations["Template_deps"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TemplateRowChangeEvent : EventArgs {
            
            private TemplateRow eventRow;
            
            private DataRowAction eventAction;
            
            public TemplateRowChangeEvent(TemplateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columndeps_Id;
            
            private DataColumn columnTemplate_Id;
            
            internal depsDataTable() : 
                    base("deps") {
                this.InitClass();
            }
            
            internal depsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn deps_IdColumn {
                get {
                    return this.columndeps_Id;
                }
            }
            
            internal DataColumn Template_IdColumn {
                get {
                    return this.columnTemplate_Id;
                }
            }
            
            public depsRow this[int index] {
                get {
                    return ((depsRow)(this.Rows[index]));
                }
            }
            
            public event depsRowChangeEventHandler depsRowChanged;
            
            public event depsRowChangeEventHandler depsRowChanging;
            
            public event depsRowChangeEventHandler depsRowDeleted;
            
            public event depsRowChangeEventHandler depsRowDeleting;
            
            public void AdddepsRow(depsRow row) {
                this.Rows.Add(row);
            }
            
            public depsRow AdddepsRow(TemplateRow parentTemplateRowByTemplate_deps) {
                depsRow rowdepsRow = ((depsRow)(this.NewRow()));
                rowdepsRow.ItemArray = new object[] {
                        null,
                        parentTemplateRowByTemplate_deps[8]};
                this.Rows.Add(rowdepsRow);
                return rowdepsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                depsDataTable cln = ((depsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new depsDataTable();
            }
            
            internal void InitVars() {
                this.columndeps_Id = this.Columns["deps_Id"];
                this.columnTemplate_Id = this.Columns["Template_Id"];
            }
            
            private void InitClass() {
                this.columndeps_Id = new DataColumn("deps_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columndeps_Id);
                this.columnTemplate_Id = new DataColumn("Template_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplate_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columndeps_Id}, true));
                this.columndeps_Id.AutoIncrement = true;
                this.columndeps_Id.AllowDBNull = false;
                this.columndeps_Id.Unique = true;
            }
            
            public depsRow NewdepsRow() {
                return ((depsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new depsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(depsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.depsRowChanged != null)) {
                    this.depsRowChanged(this, new depsRowChangeEvent(((depsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.depsRowChanging != null)) {
                    this.depsRowChanging(this, new depsRowChangeEvent(((depsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.depsRowDeleted != null)) {
                    this.depsRowDeleted(this, new depsRowChangeEvent(((depsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.depsRowDeleting != null)) {
                    this.depsRowDeleting(this, new depsRowChangeEvent(((depsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedepsRow(depsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depsRow : DataRow {
            
            private depsDataTable tabledeps;
            
            internal depsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledeps = ((depsDataTable)(this.Table));
            }
            
            public TemplateRow TemplateRow {
                get {
                    return ((TemplateRow)(this.GetParentRow(this.Table.ParentRelations["Template_deps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Template_deps"]);
                }
            }
            
            public depRow[] GetdepRows() {
                return ((depRow[])(this.GetChildRows(this.Table.ChildRelations["deps_dep"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depsRowChangeEvent : EventArgs {
            
            private depsRow eventRow;
            
            private DataRowAction eventAction;
            
            public depsRowChangeEvent(depsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public depsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnkey;
            
            private DataColumn columntype;
            
            private DataColumn columnvalue;
            
            private DataColumn columndeps_Id;
            
            internal depDataTable() : 
                    base("dep") {
                this.InitClass();
            }
            
            internal depDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn keyColumn {
                get {
                    return this.columnkey;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn deps_IdColumn {
                get {
                    return this.columndeps_Id;
                }
            }
            
            public depRow this[int index] {
                get {
                    return ((depRow)(this.Rows[index]));
                }
            }
            
            public event depRowChangeEventHandler depRowChanged;
            
            public event depRowChangeEventHandler depRowChanging;
            
            public event depRowChangeEventHandler depRowDeleted;
            
            public event depRowChangeEventHandler depRowDeleting;
            
            public void AdddepRow(depRow row) {
                this.Rows.Add(row);
            }
            
            public depRow AdddepRow(string key, string type, string value, depsRow parentdepsRowBydeps_dep) {
                depRow rowdepRow = ((depRow)(this.NewRow()));
                rowdepRow.ItemArray = new object[] {
                        key,
                        type,
                        value,
                        parentdepsRowBydeps_dep[0]};
                this.Rows.Add(rowdepRow);
                return rowdepRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                depDataTable cln = ((depDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new depDataTable();
            }
            
            internal void InitVars() {
                this.columnkey = this.Columns["key"];
                this.columntype = this.Columns["type"];
                this.columnvalue = this.Columns["value"];
                this.columndeps_Id = this.Columns["deps_Id"];
            }
            
            private void InitClass() {
                this.columnkey = new DataColumn("key", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnkey);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnvalue);
                this.columndeps_Id = new DataColumn("deps_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columndeps_Id);
                this.columnkey.Namespace = "";
                this.columntype.Namespace = "";
                this.columnvalue.Namespace = "";
            }
            
            public depRow NewdepRow() {
                return ((depRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new depRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(depRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.depRowChanged != null)) {
                    this.depRowChanged(this, new depRowChangeEvent(((depRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.depRowChanging != null)) {
                    this.depRowChanging(this, new depRowChangeEvent(((depRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.depRowDeleted != null)) {
                    this.depRowDeleted(this, new depRowChangeEvent(((depRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.depRowDeleting != null)) {
                    this.depRowDeleting(this, new depRowChangeEvent(((depRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedepRow(depRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depRow : DataRow {
            
            private depDataTable tabledep;
            
            internal depRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledep = ((depDataTable)(this.Table));
            }
            
            public string key {
                get {
                    try {
                        return ((string)(this[this.tabledep.keyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledep.keyColumn] = value;
                }
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tabledep.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledep.typeColumn] = value;
                }
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tabledep.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledep.valueColumn] = value;
                }
            }
            
            public depsRow depsRow {
                get {
                    return ((depsRow)(this.GetParentRow(this.Table.ParentRelations["deps_dep"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["deps_dep"]);
                }
            }
            
            public bool IskeyNull() {
                return this.IsNull(this.tabledep.keyColumn);
            }
            
            public void SetkeyNull() {
                this[this.tabledep.keyColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tabledep.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tabledep.typeColumn] = System.Convert.DBNull;
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tabledep.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tabledep.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class depRowChangeEvent : EventArgs {
            
            private depRow eventRow;
            
            private DataRowAction eventAction;
            
            public depRowChangeEvent(depRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public depRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomCodeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCustomCode_Id;
            
            private DataColumn columnTemplateProject_Id;
            
            internal CustomCodeDataTable() : 
                    base("CustomCode") {
                this.InitClass();
            }
            
            internal CustomCodeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CustomCode_IdColumn {
                get {
                    return this.columnCustomCode_Id;
                }
            }
            
            internal DataColumn TemplateProject_IdColumn {
                get {
                    return this.columnTemplateProject_Id;
                }
            }
            
            public CustomCodeRow this[int index] {
                get {
                    return ((CustomCodeRow)(this.Rows[index]));
                }
            }
            
            public event CustomCodeRowChangeEventHandler CustomCodeRowChanged;
            
            public event CustomCodeRowChangeEventHandler CustomCodeRowChanging;
            
            public event CustomCodeRowChangeEventHandler CustomCodeRowDeleted;
            
            public event CustomCodeRowChangeEventHandler CustomCodeRowDeleting;
            
            public void AddCustomCodeRow(CustomCodeRow row) {
                this.Rows.Add(row);
            }
            
            public CustomCodeRow AddCustomCodeRow(TemplateProjectRow parentTemplateProjectRowByTemplateProject_CustomCode) {
                CustomCodeRow rowCustomCodeRow = ((CustomCodeRow)(this.NewRow()));
                rowCustomCodeRow.ItemArray = new object[] {
                        null,
                        parentTemplateProjectRowByTemplateProject_CustomCode[6]};
                this.Rows.Add(rowCustomCodeRow);
                return rowCustomCodeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CustomCodeDataTable cln = ((CustomCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CustomCodeDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomCode_Id = this.Columns["CustomCode_Id"];
                this.columnTemplateProject_Id = this.Columns["TemplateProject_Id"];
            }
            
            private void InitClass() {
                this.columnCustomCode_Id = new DataColumn("CustomCode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCustomCode_Id);
                this.columnTemplateProject_Id = new DataColumn("TemplateProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTemplateProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCustomCode_Id}, true));
                this.columnCustomCode_Id.AutoIncrement = true;
                this.columnCustomCode_Id.AllowDBNull = false;
                this.columnCustomCode_Id.Unique = true;
            }
            
            public CustomCodeRow NewCustomCodeRow() {
                return ((CustomCodeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CustomCodeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomCodeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomCodeRowChanged != null)) {
                    this.CustomCodeRowChanged(this, new CustomCodeRowChangeEvent(((CustomCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomCodeRowChanging != null)) {
                    this.CustomCodeRowChanging(this, new CustomCodeRowChangeEvent(((CustomCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomCodeRowDeleted != null)) {
                    this.CustomCodeRowDeleted(this, new CustomCodeRowChangeEvent(((CustomCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomCodeRowDeleting != null)) {
                    this.CustomCodeRowDeleting(this, new CustomCodeRowChangeEvent(((CustomCodeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCustomCodeRow(CustomCodeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomCodeRow : DataRow {
            
            private CustomCodeDataTable tableCustomCode;
            
            internal CustomCodeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomCode = ((CustomCodeDataTable)(this.Table));
            }
            
            public TemplateProjectRow TemplateProjectRow {
                get {
                    return ((TemplateProjectRow)(this.GetParentRow(this.Table.ParentRelations["TemplateProject_CustomCode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TemplateProject_CustomCode"]);
                }
            }
            
            public CodeRow[] GetCodeRows() {
                return ((CodeRow[])(this.GetChildRows(this.Table.ChildRelations["CustomCode_Code"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomCodeRowChangeEvent : EventArgs {
            
            private CustomCodeRow eventRow;
            
            private DataRowAction eventAction;
            
            public CustomCodeRowChangeEvent(CustomCodeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CustomCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnassembly;
            
            private DataColumn column_class;
            
            private DataColumn columnCustomCode_Id;
            
            internal CodeDataTable() : 
                    base("Code") {
                this.InitClass();
            }
            
            internal CodeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn assemblyColumn {
                get {
                    return this.columnassembly;
                }
            }
            
            internal DataColumn _classColumn {
                get {
                    return this.column_class;
                }
            }
            
            internal DataColumn CustomCode_IdColumn {
                get {
                    return this.columnCustomCode_Id;
                }
            }
            
            public CodeRow this[int index] {
                get {
                    return ((CodeRow)(this.Rows[index]));
                }
            }
            
            public event CodeRowChangeEventHandler CodeRowChanged;
            
            public event CodeRowChangeEventHandler CodeRowChanging;
            
            public event CodeRowChangeEventHandler CodeRowDeleted;
            
            public event CodeRowChangeEventHandler CodeRowDeleting;
            
            public void AddCodeRow(CodeRow row) {
                this.Rows.Add(row);
            }
            
            public CodeRow AddCodeRow(string assembly, string _class, CustomCodeRow parentCustomCodeRowByCustomCode_Code) {
                CodeRow rowCodeRow = ((CodeRow)(this.NewRow()));
                rowCodeRow.ItemArray = new object[] {
                        assembly,
                        _class,
                        parentCustomCodeRowByCustomCode_Code[0]};
                this.Rows.Add(rowCodeRow);
                return rowCodeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CodeDataTable cln = ((CodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CodeDataTable();
            }
            
            internal void InitVars() {
                this.columnassembly = this.Columns["assembly"];
                this.column_class = this.Columns["class"];
                this.columnCustomCode_Id = this.Columns["CustomCode_Id"];
            }
            
            private void InitClass() {
                this.columnassembly = new DataColumn("assembly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnassembly);
                this.column_class = new DataColumn("class", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_class);
                this.columnCustomCode_Id = new DataColumn("CustomCode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCustomCode_Id);
                this.columnassembly.Namespace = "";
                this.column_class.Namespace = "";
            }
            
            public CodeRow NewCodeRow() {
                return ((CodeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CodeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CodeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CodeRowChanged != null)) {
                    this.CodeRowChanged(this, new CodeRowChangeEvent(((CodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CodeRowChanging != null)) {
                    this.CodeRowChanging(this, new CodeRowChangeEvent(((CodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CodeRowDeleted != null)) {
                    this.CodeRowDeleted(this, new CodeRowChangeEvent(((CodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CodeRowDeleting != null)) {
                    this.CodeRowDeleting(this, new CodeRowChangeEvent(((CodeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCodeRow(CodeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeRow : DataRow {
            
            private CodeDataTable tableCode;
            
            internal CodeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCode = ((CodeDataTable)(this.Table));
            }
            
            public string assembly {
                get {
                    try {
                        return ((string)(this[this.tableCode.assemblyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCode.assemblyColumn] = value;
                }
            }
            
            public string _class {
                get {
                    try {
                        return ((string)(this[this.tableCode._classColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCode._classColumn] = value;
                }
            }
            
            public CustomCodeRow CustomCodeRow {
                get {
                    return ((CustomCodeRow)(this.GetParentRow(this.Table.ParentRelations["CustomCode_Code"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CustomCode_Code"]);
                }
            }
            
            public bool IsassemblyNull() {
                return this.IsNull(this.tableCode.assemblyColumn);
            }
            
            public void SetassemblyNull() {
                this[this.tableCode.assemblyColumn] = System.Convert.DBNull;
            }
            
            public bool Is_classNull() {
                return this.IsNull(this.tableCode._classColumn);
            }
            
            public void Set_classNull() {
                this[this.tableCode._classColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeRowChangeEvent : EventArgs {
            
            private CodeRow eventRow;
            
            private DataRowAction eventAction;
            
            public CodeRowChangeEvent(CodeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompiledProject_Id;
            
            internal CompiledProjectDataTable() : 
                    base("CompiledProject") {
                this.InitClass();
            }
            
            internal CompiledProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompiledProject_IdColumn {
                get {
                    return this.columnCompiledProject_Id;
                }
            }
            
            public CompiledProjectRow this[int index] {
                get {
                    return ((CompiledProjectRow)(this.Rows[index]));
                }
            }
            
            public event CompiledProjectRowChangeEventHandler CompiledProjectRowChanged;
            
            public event CompiledProjectRowChangeEventHandler CompiledProjectRowChanging;
            
            public event CompiledProjectRowChangeEventHandler CompiledProjectRowDeleted;
            
            public event CompiledProjectRowChangeEventHandler CompiledProjectRowDeleting;
            
            public void AddCompiledProjectRow(CompiledProjectRow row) {
                this.Rows.Add(row);
            }
            
            public CompiledProjectRow AddCompiledProjectRow() {
                CompiledProjectRow rowCompiledProjectRow = ((CompiledProjectRow)(this.NewRow()));
                rowCompiledProjectRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowCompiledProjectRow);
                return rowCompiledProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompiledProjectDataTable cln = ((CompiledProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompiledProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnCompiledProject_Id = this.Columns["CompiledProject_Id"];
            }
            
            private void InitClass() {
                this.columnCompiledProject_Id = new DataColumn("CompiledProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCompiledProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCompiledProject_Id}, true));
                this.columnCompiledProject_Id.AutoIncrement = true;
                this.columnCompiledProject_Id.AllowDBNull = false;
                this.columnCompiledProject_Id.Unique = true;
            }
            
            public CompiledProjectRow NewCompiledProjectRow() {
                return ((CompiledProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompiledProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompiledProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompiledProjectRowChanged != null)) {
                    this.CompiledProjectRowChanged(this, new CompiledProjectRowChangeEvent(((CompiledProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompiledProjectRowChanging != null)) {
                    this.CompiledProjectRowChanging(this, new CompiledProjectRowChangeEvent(((CompiledProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompiledProjectRowDeleted != null)) {
                    this.CompiledProjectRowDeleted(this, new CompiledProjectRowChangeEvent(((CompiledProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompiledProjectRowDeleting != null)) {
                    this.CompiledProjectRowDeleting(this, new CompiledProjectRowChangeEvent(((CompiledProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompiledProjectRow(CompiledProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledProjectRow : DataRow {
            
            private CompiledProjectDataTable tableCompiledProject;
            
            internal CompiledProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompiledProject = ((CompiledProjectDataTable)(this.Table));
            }
            
            public CompiledTemplateRow[] GetCompiledTemplateRows() {
                return ((CompiledTemplateRow[])(this.GetChildRows(this.Table.ChildRelations["CompiledProject_CompiledTemplate"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledProjectRowChangeEvent : EventArgs {
            
            private CompiledProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompiledProjectRowChangeEvent(CompiledProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompiledProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledTemplateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnassembly;
            
            private DataColumn column_class;
            
            private DataColumn columnCompiledProject_Id;
            
            internal CompiledTemplateDataTable() : 
                    base("CompiledTemplate") {
                this.InitClass();
            }
            
            internal CompiledTemplateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn assemblyColumn {
                get {
                    return this.columnassembly;
                }
            }
            
            internal DataColumn _classColumn {
                get {
                    return this.column_class;
                }
            }
            
            internal DataColumn CompiledProject_IdColumn {
                get {
                    return this.columnCompiledProject_Id;
                }
            }
            
            public CompiledTemplateRow this[int index] {
                get {
                    return ((CompiledTemplateRow)(this.Rows[index]));
                }
            }
            
            public event CompiledTemplateRowChangeEventHandler CompiledTemplateRowChanged;
            
            public event CompiledTemplateRowChangeEventHandler CompiledTemplateRowChanging;
            
            public event CompiledTemplateRowChangeEventHandler CompiledTemplateRowDeleted;
            
            public event CompiledTemplateRowChangeEventHandler CompiledTemplateRowDeleting;
            
            public void AddCompiledTemplateRow(CompiledTemplateRow row) {
                this.Rows.Add(row);
            }
            
            public CompiledTemplateRow AddCompiledTemplateRow(string assembly, string _class, CompiledProjectRow parentCompiledProjectRowByCompiledProject_CompiledTemplate) {
                CompiledTemplateRow rowCompiledTemplateRow = ((CompiledTemplateRow)(this.NewRow()));
                rowCompiledTemplateRow.ItemArray = new object[] {
                        assembly,
                        _class,
                        parentCompiledProjectRowByCompiledProject_CompiledTemplate[0]};
                this.Rows.Add(rowCompiledTemplateRow);
                return rowCompiledTemplateRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompiledTemplateDataTable cln = ((CompiledTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompiledTemplateDataTable();
            }
            
            internal void InitVars() {
                this.columnassembly = this.Columns["assembly"];
                this.column_class = this.Columns["class"];
                this.columnCompiledProject_Id = this.Columns["CompiledProject_Id"];
            }
            
            private void InitClass() {
                this.columnassembly = new DataColumn("assembly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnassembly);
                this.column_class = new DataColumn("class", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_class);
                this.columnCompiledProject_Id = new DataColumn("CompiledProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCompiledProject_Id);
                this.columnassembly.Namespace = "";
                this.column_class.Namespace = "";
            }
            
            public CompiledTemplateRow NewCompiledTemplateRow() {
                return ((CompiledTemplateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompiledTemplateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompiledTemplateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompiledTemplateRowChanged != null)) {
                    this.CompiledTemplateRowChanged(this, new CompiledTemplateRowChangeEvent(((CompiledTemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompiledTemplateRowChanging != null)) {
                    this.CompiledTemplateRowChanging(this, new CompiledTemplateRowChangeEvent(((CompiledTemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompiledTemplateRowDeleted != null)) {
                    this.CompiledTemplateRowDeleted(this, new CompiledTemplateRowChangeEvent(((CompiledTemplateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompiledTemplateRowDeleting != null)) {
                    this.CompiledTemplateRowDeleting(this, new CompiledTemplateRowChangeEvent(((CompiledTemplateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompiledTemplateRow(CompiledTemplateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledTemplateRow : DataRow {
            
            private CompiledTemplateDataTable tableCompiledTemplate;
            
            internal CompiledTemplateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompiledTemplate = ((CompiledTemplateDataTable)(this.Table));
            }
            
            public string assembly {
                get {
                    try {
                        return ((string)(this[this.tableCompiledTemplate.assemblyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompiledTemplate.assemblyColumn] = value;
                }
            }
            
            public string _class {
                get {
                    try {
                        return ((string)(this[this.tableCompiledTemplate._classColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompiledTemplate._classColumn] = value;
                }
            }
            
            public CompiledProjectRow CompiledProjectRow {
                get {
                    return ((CompiledProjectRow)(this.GetParentRow(this.Table.ParentRelations["CompiledProject_CompiledTemplate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CompiledProject_CompiledTemplate"]);
                }
            }
            
            public bool IsassemblyNull() {
                return this.IsNull(this.tableCompiledTemplate.assemblyColumn);
            }
            
            public void SetassemblyNull() {
                this[this.tableCompiledTemplate.assemblyColumn] = System.Convert.DBNull;
            }
            
            public bool Is_classNull() {
                return this.IsNull(this.tableCompiledTemplate._classColumn);
            }
            
            public void Set_classNull() {
                this[this.tableCompiledTemplate._classColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompiledTemplateRowChangeEvent : EventArgs {
            
            private CompiledTemplateRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompiledTemplateRowChangeEvent(CompiledTemplateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompiledTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
